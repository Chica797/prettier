// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`css-prop.js 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
function SomeComponent (props) {
  // Create styles as if you're calling css and the class will be applied to the component
  return (<div css={\`
    color: blue;
    font-size: 17 px;

    &:hover {
      color: green;
    }

    & .some-class {
      font-size: 20px;
    }
  \`}>
    This will be blue until hovered.
    <div className="some-class">
      This font size will be 20px
    </div>
  </div>)
}

const TestComponent = ({ children, ...props }) => (
  <div css={\`color: white; background: black\`}>
    {children}
  </div>
);

=====================================output=====================================
function SomeComponent(props) {
  // Create styles as if you're calling css and the class will be applied to the component
  return (
    <div
      css={\`
        color: blue;
        font-size: 17 px;

        &:hover {
          color: green;
        }

        & .some-class {
          font-size: 20px;
        }
      \`}
    >
      This will be blue until hovered.
      <div className="some-class">This font size will be 20px</div>
    </div>
  );
}

const TestComponent = ({ children, ...props }) => (
  <div
    css={\`
      color: white;
      background: black;
    \`}
  >
    {children}
  </div>
);

================================================================================
`;

exports[`expressions.js 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const long1 = \`long \${a//comment
  .b} long longlong \${a.b.c.d.e} long longlong \${a.b.c.d.e} long longlong \${a.b.c.d.e} long long\`;
const long2 = \`long \${a.b.c.d.e} long longlong \${loooooooooooooooooong} long longlong \${loooooooooooooooooong} long longlong \${loooooooooooooooooong} long long\`;

const long3 = \`long long long long long long long long long long long \${a.b.c.d.e} long long long long long long long long long long long long long\`;

const description =
  \`The value of the \${cssName} css of the \${this._name} element\`;

const foo = \`such a long template string \${foo.bar.baz} that prettier will want to wrap it\`;

const shouldWrapForNow = \`such a long template string \${foo().bar.baz} that prettier will want to wrap it\`;

const shouldNotWrap = \`simple expressions should not break \${this} \${variable} \${a.b.c} \${this.b.c} \${a[b].c} \${a.b[c]} \${a.b['c']} \${a?.b?.c}\`;

console.log(chalk.white(\`Covered Lines below threshold: \${coverageSettings.lines}%. Actual: \${coverageSummary.total.lines.pct}%\`))

x = \`mdl-textfield mdl-js-textfield \${className} \${content.length > 0
  ? 'is-dirty'
  : ''} combo-box__input\`

function testing() {
  const p = {};
  // faking some tabs since I can't paste my real code in
  if(true) {
    if(false) {
      return \`\${process.env.OPENID_URL}/something/something/something?\${Object.keys(p)
        .map(k => \`\${encodeURIComponent(k)}=\${encodeURIComponent(p[k])}\`)
        .join("&")}\`;
    }
  }
}

console.log(
  \`Trying update appcast for \${app.name} (\${app.cask.appcast}) -> (\${app.cask.appcastGenerated})\`
)

console.log(\`brew cask audit --download \${_.map(definitions, 'caskName').join(' ')}\`)

console.log(\`\\nApparently jetbrains changed the release artifact for \${app.name}@\${app.jetbrains.version}.\\n\`);

descirbe('something', () => {
  test(\`{pass: false} expect(\${small}).toBeGreaterThanOrEqual(\${big})\`, () => {});
})

throw new Error(\`pretty-format: Option "theme" has a key "\${key}" whose value "\${value}" is undefined in ansi-styles.\`,)

=====================================output=====================================
const long1 = \`long \${
  a.b //comment
} long longlong \${a.b.c.d.e} long longlong \${a.b.c.d.e} long longlong \${
  a.b.c.d.e
} long long\`;
const long2 = \`long \${a.b.c.d.e} long longlong \${loooooooooooooooooong} long longlong \${loooooooooooooooooong} long longlong \${loooooooooooooooooong} long long\`;

const long3 = \`long long long long long long long long long long long \${a.b.c.d.e} long long long long long long long long long long long long long\`;

const description = \`The value of the \${cssName} css of the \${this._name} element\`;

const foo = \`such a long template string \${foo.bar.baz} that prettier will want to wrap it\`;

const shouldWrapForNow = \`such a long template string \${
  foo().bar.baz
} that prettier will want to wrap it\`;

const shouldNotWrap = \`simple expressions should not break \${this} \${variable} \${a.b.c} \${this.b.c} \${a[b].c} \${a.b[c]} \${a.b["c"]} \${a?.b?.c}\`;

console.log(
  chalk.white(
    \`Covered Lines below threshold: \${coverageSettings.lines}%. Actual: \${coverageSummary.total.lines.pct}%\`
  )
);

x = \`mdl-textfield mdl-js-textfield \${className} \${
  content.length > 0 ? "is-dirty" : ""
} combo-box__input\`;

function testing() {
  const p = {};
  // faking some tabs since I can't paste my real code in
  if (true) {
    if (false) {
      return \`\${
        process.env.OPENID_URL
      }/something/something/something?\${Object.keys(p)
        .map(k => \`\${encodeURIComponent(k)}=\${encodeURIComponent(p[k])}\`)
        .join("&")}\`;
    }
  }
}

console.log(
  \`Trying update appcast for \${app.name} (\${app.cask.appcast}) -> (\${app.cask.appcastGenerated})\`
);

console.log(
  \`brew cask audit --download \${_.map(definitions, "caskName").join(" ")}\`
);

console.log(
  \`\\nApparently jetbrains changed the release artifact for \${app.name}@\${app.jetbrains.version}.\\n\`
);

descirbe("something", () => {
  test(\`{pass: false} expect(\${small}).toBeGreaterThanOrEqual(\${big})\`, () => {});
});

throw new Error(
  \`pretty-format: Option "theme" has a key "\${key}" whose value "\${value}" is undefined in ansi-styles.\`
);

================================================================================
`;

exports[`styled-components-with-expressions.js 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const Button = styled.a\`
/* Comment */
	display: \${props=>props.display};
\`;

styled.div\`
	display: \${props=>props.display};
	border: \${props=>props.border}px;
	margin: 10px \${props=>props.border}px ;
\`;

const EqualDivider = styled.div\`
margin: 0.5rem;
		padding: 1rem;
	background: papayawhip    ;

	> * {
	flex: 1;

	&:not(:first-child) {
			\${props => props.vertical ? 'margin-top' : 'margin-left'}: 1rem;
		}
	}
\`;

const header = css\`
.top-bar {background:black;
margin: 0;
    position: fixed;
	top: 0;left:0;
	width: 100%;
    text-align: center     ;
	padding: 15px  0  0  1em;
		z-index: 9999;
}

.top-bar .logo {
  height: 30px;
  margin: auto; 
    position: absolute;
	left: 0;right: 0;
}
\`;

// #6259 #4520
styled.div\`
         \${expr}:not(:first-child) {
    // should not add space after :not
}
         \${expr}[checked] {
    // should not add space before [
}
  margin: 0;.input {}
\`

// #5465 #5614
css\`
         prop: var(--foo--\${expr});
background-color: var(--\${props => props.color});
\`

// #5219
css\`
         src: "\${expr}";
\`;

// #6392
styled(_A)\`
         \${B}, \${C} {}
\`

// #5961
styled.div\`
         @media (min-width: 1px) {
\${Step}:nth-child(odd) {
// should not add space after :nth-child
}
}
\`;

// #4355
styled.div\`
         border: 1px solid \${({active}) => active ? themeColor.active : themeColor.inactive};
\`

// #2350
styled.div\`
         display: block;
  \${props => props.rounded && 'border-radius: 5px;'}
\`;

// should not crush
styled.div\`\${a}\${b}\${c}\${d}\${e}\${f}
// comment
\${g}//comment
\${h}/*comment*/;
         \${i};\${j}\${k}\${l}\${m}\${n}\${o}\${p}\${q}\${r}\${s}\${t}\${u}\${v}\${w}\${x}\${y}
// comment
\${z}\`

=====================================output=====================================
const Button = styled.a\`
  /* Comment */
  display: \${props => props.display};
\`;

styled.div\`
  display: \${props => props.display};
  border: \${props => props.border}px;
  margin: 10px \${props => props.border}px;
\`;

const EqualDivider = styled.div\`
  margin: 0.5rem;
  padding: 1rem;
  background: papayawhip;

  > * {
    flex: 1;

    &:not(:first-child) {
      \${props => (props.vertical ? "margin-top" : "margin-left")}: 1rem;
    }
  }
\`;

const header = css\`
  .top-bar {
    background: black;
    margin: 0;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    text-align: center;
    padding: 15px 0 0 1em;
    z-index: 9999;
  }

  .top-bar .logo {
    height: 30px;
    margin: auto;
    position: absolute;
    left: 0;
    right: 0;
  }
\`;

// #6259 #4520
styled.div\`
  \${expr}:not(:first-child) {
    // should not add space after :not
  }
  \${expr}[checked] {
    // should not add space before [
  }
  margin: 0;
  .input {
  }
\`;

// #5465 #5614
css\`
  prop: var(--foo--\${expr});
  background-color: var(--\${props => props.color});
\`;

// #5219
css\`
  src: "\${expr}";
\`;

// #6392
styled(_A)\`
  \${B},
  \${C} {
  }
\`;

// #5961
styled.div\`
  @media (min-width: 1px) {
    \${Step}:nth-child(odd) {
      // should not add space after :nth-child
    }
  }
\`;

// #4355
styled.div\`
  border: 1px solid \${({ active }) =>
      active ? themeColor.active : themeColor.inactive};
\`;

// #2350
styled.div\`
  display: block;
  \${props => props.rounded && "border-radius: 5px;"}
\`;

// should not crush
styled.div\`
  \${a}
  \${b}
  \${c}
  \${d}
  \${e}
  \${f}
  // comment
  \${g} //comment
  \${h} /*comment*/;
  \${i};
  \${j}
  \${k}
  \${l}
  \${m}
  \${n}
  \${o}
  \${p}
  \${q}
  \${r}
  \${s}
  \${t}
  \${u}
  \${v}
  \${w}
  \${x}
  \${y}
  // comment
  \${z}
\`;

================================================================================
`;

exports[`styled-jsx.js 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<style jsx>{\`
	/* a comment */
	div :global(.react-select) {
		color: red; display: none
	}
\`}</style>;

<div>
<style jsx>{\`
	/* a comment */
div :global(.react-select) {
color: red; display: none
}\`}</style>
</div>;

<div>
<style jsx>{\`div{color:red}\`}</style>
</div>;

<div>
<style jsx>{\`This is invalid css. 
      Shouldn't fail.
            Shouldn't be formatted.\`}</style>
</div>;

const header = css\`
.top-bar {background:black;
margin: 0;
    position: fixed;
	top: 0;left:0;
	width: 100%;
    text-align: center     ;
	padding: 15px  0  0  1em;
		z-index: 9999;
}

.top-bar .logo {
  height: 30px;
  margin: auto; 
    position: absolute;
	left: 0;right: 0;
}
\`;

const headerResolve = css.resolve\`
.top-bar {background:black;
margin: 0;
    position: fixed;
	top: 0;left:0;
	width: 100%;
    text-align: center     ;
	padding: 15px  0  0  1em;
		z-index: 9999;
}

.top-bar .logo {
  height: 30px;
  margin: auto; 
    position: absolute;
	left: 0;right: 0;
}
\`;

const headerGlobal = css.global\`
.top-bar {background:black;
margin: 0;
    position: fixed;
	top: 0;left:0;
	width: 100%;
    text-align: center     ;
	padding: 15px  0  0  1em;
		z-index: 9999;
}

.top-bar .logo {
  height: 30px;
  margin: auto; 
    position: absolute;
	left: 0;right: 0;
}
\`;

=====================================output=====================================
<style jsx>{\`
  /* a comment */
  div :global(.react-select) {
    color: red;
    display: none;
  }
\`}</style>;

<div>
  <style jsx>{\`
    /* a comment */
    div :global(.react-select) {
      color: red;
      display: none;
    }
  \`}</style>
</div>;

<div>
  <style jsx>{\`
    div {
      color: red;
    }
  \`}</style>
</div>;

<div>
  <style jsx>{\`This is invalid css. 
      Shouldn't fail.
            Shouldn't be formatted.\`}</style>
</div>;

const header = css\`
  .top-bar {
    background: black;
    margin: 0;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    text-align: center;
    padding: 15px 0 0 1em;
    z-index: 9999;
  }

  .top-bar .logo {
    height: 30px;
    margin: auto;
    position: absolute;
    left: 0;
    right: 0;
  }
\`;

const headerResolve = css.resolve\`
  .top-bar {
    background: black;
    margin: 0;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    text-align: center;
    padding: 15px 0 0 1em;
    z-index: 9999;
  }

  .top-bar .logo {
    height: 30px;
    margin: auto;
    position: absolute;
    left: 0;
    right: 0;
  }
\`;

const headerGlobal = css.global\`
  .top-bar {
    background: black;
    margin: 0;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    text-align: center;
    padding: 15px 0 0 1em;
    z-index: 9999;
  }

  .top-bar .logo {
    height: 30px;
    margin: auto;
    position: absolute;
    left: 0;
    right: 0;
  }
\`;

================================================================================
`;

exports[`styled-jsx-with-expressions.js 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// current logic breaks on any expression fail,
// so test one by one

// expression in tag selector(middle)
<style jsx>{\`
         foo\${exp}bar {}
\`}</style>;
// expression in tag selector(beginning)
<style jsx>{\`
         \${exp}bar {}
\`}</style>;
// expression in tag selector(end)
<style jsx>{\`
         foo\${exp} {}
\`}</style>;

// expression in id selector(middle)
<style jsx>{\`
         #foo\${exp}bar {}
\`}</style>;
// expression in id selector(beginning)
<style jsx>{\`
         #\${exp}bar {}
\`}</style>;
// expression in id selector(end)
<style jsx>{\`
         #\${exp}bar {}
\`}</style>;

// expression in class selector(middle)
<style jsx>{\`
         .foo\${exp}bar {}
\`}</style>;
// expression in class selector(beginning)
<style jsx>{\`
         .\${exp}bar {}
\`}</style>;
// expression in class selector(end)
<style jsx>{\`
         .\${exp}bar {}
\`}</style>;

// expression in attribute name(middle)
<style jsx>{\`
         [foo\${exp}bar] {}
\`}</style>;
// expression in attribute name(beginning)
<style jsx>{\`
         [\${exp}bar] {}
\`}</style>;
// expression in attribute name(end)
<style jsx>{\`
         [foo\${exp}] {}
\`}</style>;

// expression in attribute value(middle)
<style jsx>{\`
         [a^=foo\${exp}bar] {}
\`}</style>;
// expression in attribute value(beginning)
<style jsx>{\`
         [a^=\${exp}bar] {}
\`}</style>;
// expression in attribute value(end)
<style jsx>{\`
         [a^=foo\${exp}] {}
\`}</style>;

// expression in decl prop(middle)
<style jsx>{\`
         a {foo\${exp}bar: 1;}
\`}</style>;
// expression in decl prop(beginning)
<style jsx>{\`
         a {\${exp}bar: 1;}
\`}</style>;
// expression in decl prop(end)
<style jsx>{\`
         a {foo\${exp}: 1;}
\`}</style>;

// expression in decl value(middle)
<style jsx>{\`
         a {a: foo\${exp}bar;}
\`}</style>;
// expression in decl value(beginning)
<style jsx>{\`
         a {a: \${exp}bar;}
\`}</style>;
// expression in decl value(end)
<style jsx>{\`
         a {a: foo\${exp};}
\`}</style>;

// expression in at-rule(middle)
<style jsx>{\`
         @foo\${exp}bar (min-width: 100px) {div {}}
\`}</style>;
// expression in at-rule(beginning)
<style jsx>{\`
         @\${exp}bar (min-width: 100px) {div {}}
\`}</style>;
// expression in at-rule(end)
<style jsx>{\`
         @foo\${exp} (min-width: 100px) {div {}}
\`}</style>;

// expression in at-rule prop(middle)
<style jsx>{\`
         @media (foo\${exp}bar: 100px) {div {}}
\`}</style>;
// expression in at-rule prop(beginning)
<style jsx>{\`
         @media (\${exp}bar: 100px) {div {}}
\`}</style>;
// expression in at-rule prop(end)
<style jsx>{\`
         @media (foo\${exp}: 100px) {div {}}
\`}</style>;

// expression in at-rule value(middle)
<style jsx>{\`
         @media (min-width: foo\${exp}bar) {div {}}
\`}</style>;
// expression in at-rule value(beginning)
<style jsx>{\`
         @media (min-width: \${exp}bar) {div {}}
\`}</style>;
// expression in at-rule value(end)
<style jsx>{\`
         @media (min-width: foo\${exp}) {div {}}
\`}</style>;

// expression in at-rule condition(middle)
<style jsx>{\`
         @media (foo\${exp}bar) {div {}}
\`}</style>;
// expression in at-rule condition(beginning)
<style jsx>{\`
         @media (\${exp}bar) {div {}}
\`}</style>;
// expression in at-rule condition(end)
<style jsx>{\`
         @media (foo\${exp}) {div {}}
\`}</style>;

// expression as decl
<style jsx>{\`
         a {
\${exp};
	   }
\`}</style>;

// expression as decl(many)
<style jsx>{\`
         a {
\${exp};
\${exp};
	   }
\`}</style>;
// expression as decl(no breaks)
<style jsx>{\`
         a {
\${exp}\${exp};
     }
\`}</style>;

<style jsx>{\`
         a {
\${exp};\${exp};
	   }
\`}</style>;
// expression as decl(middle), FIXME
<style jsx>{\`
         a {
foo\${exp}bar;
	   }
\`}</style>;
// expression as decl(beginning), FIXME
<style jsx>{\`
         a {
\${exp}bar;
	   }
\`}</style>;
// expression as decl(end), FIXME
<style jsx>{\`
         a {
foo\${exp};
	   }
\`}</style>;


// semi test

// should not insert semi
<style jsx>{\`
         a {
\${exp}}
\`}</style>;
// should keep semi
<style jsx>{\`
         b {\${exp} ;
}
\`}</style>;
// should not insert semi
<style jsx>{\`
         c {
\${exp}\${exp}                }
\`}</style>;
// should keep one semi
<style jsx>{\`
         d {\${exp} \${exp} ;}
\`}</style>;
// should keep 2 semi
<style jsx>{\`
         e {\${exp}               ;
\${exp};}
\`}</style>;

// comment test

// inline-comment(before)
<style jsx>{\`
         a {
// comment
          \${exp}
}
\`}</style>;

// block-comment(before)
<style jsx>{\`
         a {
/*comment*/
          \${exp}
}
\`}</style>;

// inside-comment(before)
<style jsx>{\`
         a {
/*comment\${a}
*/
          \${exp}
}
\`}</style>;

// inline-comment(after)
<style jsx>{\`
         a {
          \${exp}
        // comment
}
\`}</style>;

// block-comment(after)
<style jsx>{\`
         a {
          \${exp}
        /*comment
*/
}
\`}</style>;

// inside-comment(after)
<style jsx>{\`
         a {
          \${exp}
        /*comment\${b}
*/
}
\`}</style>;

// inline-comment(both)
<style jsx>{\`
         a {
// comment
          \${exp}
        // comment
}
\`}</style>;

// block-comment(both)
<style jsx>{\`
         a {
/*comment
*/
          \${exp}
        /*comment
*/
}
\`}</style>;

// inside-comment(both)
<style jsx>{\`
         a {
/*comment\${a}
*/
          \${exp}
        /*comment\${b}
*/
}
\`}</style>;


// real world cases

<style jsx>{\`
  div {
  display: \${expr};
    color: \${expr};
    \${expr};
    \${expr};
    background: red;
  animation: \${expr} 10s ease-out;
  }
  @media (\${expr}) {
   div.\${expr} {
    color: red;
   }
  \${expr} {
    color: red;
  }
  }
  @media (min-width: \${expr}) {
   div.\${expr} {
    color: red;
   }
  all\${expr} {
    color: red;
  }
  }
         @font-face {
\${expr}
}
\`}</style>;

<style jsx>{\`
  div {
  animation: linear \${seconds}s ease-out;
  }
\`}</style>;

<style jsx>{\`
  div {
  animation: 3s ease-in 1s \${foo => foo.getIterations()} reverse both paused slidein;
  }
\`}</style>;

// #5886
<style jsx>{\`
         .class{
flex-direction: column\${long_cond && long_cond && long_cond ? "-reverse" : ""};
}
\`}</style>

=====================================output=====================================
// current logic breaks on any expression fail,
// so test one by one

// expression in tag selector(middle)
<style jsx>{\`
  foo\${exp}bar {
  }
\`}</style>;
// expression in tag selector(beginning)
<style jsx>{\`
  \${exp}bar {
  }
\`}</style>;
// expression in tag selector(end)
<style jsx>{\`
  foo\${exp} {
  }
\`}</style>;

// expression in id selector(middle)
<style jsx>{\`
  #foo\${exp}bar {
  }
\`}</style>;
// expression in id selector(beginning)
<style jsx>{\`
  #\${exp}bar {
  }
\`}</style>;
// expression in id selector(end)
<style jsx>{\`
  #\${exp}bar {
  }
\`}</style>;

// expression in class selector(middle)
<style jsx>{\`
  .foo\${exp}bar {
  }
\`}</style>;
// expression in class selector(beginning)
<style jsx>{\`
  .\${exp}bar {
  }
\`}</style>;
// expression in class selector(end)
<style jsx>{\`
  .\${exp}bar {
  }
\`}</style>;

// expression in attribute name(middle)
<style jsx>{\`
  [foo\${exp}bar] {
  }
\`}</style>;
// expression in attribute name(beginning)
<style jsx>{\`
  [\${exp}bar] {
  }
\`}</style>;
// expression in attribute name(end)
<style jsx>{\`
  [foo\${exp}] {
  }
\`}</style>;

// expression in attribute value(middle)
<style jsx>{\`
  [a^="foo\${exp}bar"] {
  }
\`}</style>;
// expression in attribute value(beginning)
<style jsx>{\`
  [a^="\${exp}bar"] {
  }
\`}</style>;
// expression in attribute value(end)
<style jsx>{\`
  [a^="foo\${exp}"] {
  }
\`}</style>;

// expression in decl prop(middle)
<style jsx>{\`
  a {
    foo\${exp}bar: 1;
  }
\`}</style>;
// expression in decl prop(beginning)
<style jsx>{\`
  a {
    \${exp}bar: 1;
  }
\`}</style>;
// expression in decl prop(end)
<style jsx>{\`
  a {
    foo\${exp}: 1;
  }
\`}</style>;

// expression in decl value(middle)
<style jsx>{\`
  a {
    a: foo\${exp}bar;
  }
\`}</style>;
// expression in decl value(beginning)
<style jsx>{\`
  a {
    a: \${exp}bar;
  }
\`}</style>;
// expression in decl value(end)
<style jsx>{\`
  a {
    a: foo\${exp};
  }
\`}</style>;

// expression in at-rule(middle)
<style jsx>{\`
  @foo\${exp}bar (min-width: 100px) {
    div {
    }
  }
\`}</style>;
// expression in at-rule(beginning)
<style jsx>{\`
  @\${exp}bar (min-width: 100px) {
    div {
    }
  }
\`}</style>;
// expression in at-rule(end)
<style jsx>{\`
  @foo\${exp} (min-width: 100px) {
    div {
    }
  }
\`}</style>;

// expression in at-rule prop(middle)
<style jsx>{\`
  @media (foo\${exp}bar: 100px) {
    div {
    }
  }
\`}</style>;
// expression in at-rule prop(beginning)
<style jsx>{\`
  @media (\${exp}bar: 100px) {
    div {
    }
  }
\`}</style>;
// expression in at-rule prop(end)
<style jsx>{\`
  @media (foo\${exp}: 100px) {
    div {
    }
  }
\`}</style>;

// expression in at-rule value(middle)
<style jsx>{\`
  @media (min-width: foo\${exp}bar) {
    div {
    }
  }
\`}</style>;
// expression in at-rule value(beginning)
<style jsx>{\`
  @media (min-width: \${exp}bar) {
    div {
    }
  }
\`}</style>;
// expression in at-rule value(end)
<style jsx>{\`
  @media (min-width: foo\${exp}) {
    div {
    }
  }
\`}</style>;

// expression in at-rule condition(middle)
<style jsx>{\`
  @media (foo\${exp}bar) {
    div {
    }
  }
\`}</style>;
// expression in at-rule condition(beginning)
<style jsx>{\`
  @media (\${exp}bar) {
    div {
    }
  }
\`}</style>;
// expression in at-rule condition(end)
<style jsx>{\`
  @media (foo\${exp}) {
    div {
    }
  }
\`}</style>;

// expression as decl
<style jsx>{\`
  a {
    \${exp};
  }
\`}</style>;

// expression as decl(many)
<style jsx>{\`
  a {
    \${exp};
    \${exp};
  }
\`}</style>;
// expression as decl(no breaks)
<style jsx>{\`
  a {
    \${exp}
    \${exp};
  }
\`}</style>;

<style jsx>{\`
  a {
    \${exp};
    \${exp};
  }
\`}</style>;
// expression as decl(middle), FIXME
<style jsx>{\`
         a {
foo\${exp}bar;
	   }
\`}</style>;
// expression as decl(beginning), FIXME
<style jsx>{\`
         a {
\${exp}bar;
	   }
\`}</style>;
// expression as decl(end), FIXME
<style jsx>{\`
         a {
foo\${exp};
	   }
\`}</style>;

// semi test

// should not insert semi
<style jsx>{\`
  a {
    \${exp}
  }
\`}</style>;
// should keep semi
<style jsx>{\`
  b {
    \${exp};
  }
\`}</style>;
// should not insert semi
<style jsx>{\`
  c {
    \${exp}
    \${exp}
  }
\`}</style>;
// should keep one semi
<style jsx>{\`
  d {
    \${exp}
    \${exp};
  }
\`}</style>;
// should keep 2 semi
<style jsx>{\`
  e {
    \${exp};
    \${exp};
  }
\`}</style>;

// comment test

// inline-comment(before)
<style jsx>{\`
  a {
    // comment
    \${exp}
  }
\`}</style>;

// block-comment(before)
<style jsx>{\`
  a {
    /*comment*/
    \${exp}
  }
\`}</style>;

// inside-comment(before)
<style jsx>{\`
  a {
    /*comment\${a}
*/
    \${exp}
  }
\`}</style>;

// inline-comment(after)
<style jsx>{\`
  a {
    \${exp}
    // comment
  }
\`}</style>;

// block-comment(after)
<style jsx>{\`
  a {
    \${exp}
    /*comment
*/
  }
\`}</style>;

// inside-comment(after)
<style jsx>{\`
  a {
    \${exp}
    /*comment\${b}
*/
  }
\`}</style>;

// inline-comment(both)
<style jsx>{\`
  a {
    // comment
    \${exp}
    // comment
  }
\`}</style>;

// block-comment(both)
<style jsx>{\`
  a {
    /*comment
*/
    \${exp}
    /*comment
*/
  }
\`}</style>;

// inside-comment(both)
<style jsx>{\`
  a {
    /*comment\${a}
*/
    \${exp}
    /*comment\${b}
*/
  }
\`}</style>;

// real world cases

<style jsx>{\`
  div {
    display: \${expr};
    color: \${expr};
    \${expr};
    \${expr};
    background: red;
    animation: \${expr} 10s ease-out;
  }
  @media (\${expr}) {
    div.\${expr} {
      color: red;
    }
    \${expr} {
      color: red;
    }
  }
  @media (min-width: \${expr}) {
    div.\${expr} {
      color: red;
    }
    all\${expr} {
      color: red;
    }
  }
  @font-face {
    \${expr}
  }
\`}</style>;

<style jsx>{\`
  div {
    animation: linear \${seconds}s ease-out;
  }
\`}</style>;

<style jsx>{\`
  div {
    animation: 3s ease-in 1s \${foo => foo.getIterations()} reverse both paused
      slidein;
  }
\`}</style>;

// #5886
<style jsx>{\`
  .class {
    flex-direction: column\${long_cond && long_cond && long_cond
      ? "-reverse"
      : ""};
  }
\`}</style>;

================================================================================
`;
