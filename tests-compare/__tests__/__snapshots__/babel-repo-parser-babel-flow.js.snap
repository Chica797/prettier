// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/anonymous-function-no-parens-types/bad_01/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:28)
> 1 | var f = (x): number => 123 => 123;
    |                            ^
  2 |],
  "input": "var f = (x): number => 123 => 123;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/anonymous-function-no-parens-types/bad_02/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:37)
> 1 | var f = (x): string | number => 123 => 123;
    |                                     ^
  2 |],
  "input": "var f = (x): string | number => 123 => 123;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/anonymous-function-types/bad_01/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:30)
> 1 | var f = (x): (number) => 123 => 123;
    |                              ^
  2 |],
  "input": "var f = (x): (number) => 123 => 123;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/anonymous-function-types/bad_02/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:39)
> 1 | var f = (x): string | (number) => 123 => 123;
    |                                       ^
  2 |],
  "input": "var f = (x): string | (number) => 123 => 123;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/anonymous-function-types/bad_03/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:31)
> 1 | var f = (x): ?(number) => 123 => 123;
    |                               ^
  2 |],
  "input": "var f = (x): ?(number) => 123 => 123;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/class-properties/declare-before-decorators/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (2:11)
  1 | class A {
> 2 |   declare @dec foo
    |           ^
  3 | }
  4 |],
  "input": "class A {
  declare @dec foo
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/class-properties/invalid-getter-setter/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (2:8)
  1 | declare class B {
> 2 |   get a: number;
    |        ^
  3 | }
  4 |],
  "input": "declare class B {
  get a: number;
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/class-properties/static-declare-field/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (2:18)
  1 | class A {
> 2 |   static declare foo
    |                  ^
  3 | }
  4 |],
  "input": "class A {
  static declare foo
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/classes/mixins-error/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected "{" (1:9)
> 1 | class A mixins B {}
    |         ^
  2 |],
  "input": "class A mixins B {}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/comment/06-type-include-error/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unterminated comment (2:3)
  1 | class MyClass {
> 2 |   /* :: prop: string;
    |   ^
  3 | }
  4 |],
  "input": "class MyClass {
  /* :: prop: string;
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/comment/07-type-include-error/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unterminated comment (1:1)
> 1 | /*::
    | ^
  2 | type Foo = {
  3 |   foo: number,
  4 |   bar: boolean,],
  "input": "/*::
type Foo = {
  foo: number,
  bar: boolean,
  baz: string
};
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/comment/08-type-flow-include-error/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unterminated comment (1:1)
> 1 | /* flow-include
    | ^
  2 | type Foo = {
  3 |   foo: number,
  4 |   bar: boolean,],
  "input": "/* flow-include
type Foo = {
  foo: number,
  bar: boolean,
  baz: string
};
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/comment/09-type-flow-include-error/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unterminated comment (2:3)
  1 | class MyClass {
> 2 |   /*flow-include prop: string;
    |   ^
  3 | }
  4 |],
  "input": "class MyClass {
  /*flow-include prop: string;
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/comment/10-type-annotation-error/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unterminated comment (1:23)
> 1 | function method(param /*: string) {
    |                       ^
  2 | }
  3 |],
  "input": "function method(param /*: string) {
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/declare-class/implements-with-mixin-order/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected "{" (1:30)
> 1 | declare class A implements B mixins C {}
    |                              ^
  2 |],
  "input": "declare class A implements B mixins C {}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/declare-export/invalid-declare-export-type/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: \`declare export type\` is not supported. Use \`export type\` instead (1:16)
> 1 | declare export type foo = number;
    |                ^
  2 |],
  "input": "declare export type foo = number;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/declare-export/invalid-export-arrow/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:16)
> 1 | declare export (a:number) => number
    |                ^
  2 |],
  "input": "declare export (a:number) => number
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/declare-export/invalid-export-const/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: \`declare export const\` is not supported. Use \`declare export var\` instead (1:16)
> 1 | declare export const foo: number
    |                ^
  2 |],
  "input": "declare export const foo: number
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/declare-export/invalid-export-default-function/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:33)
> 1 | declare export default function (p1: number): string;
    |                                 ^
  2 |],
  "input": "declare export default function (p1: number): string;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/declare-export/invalid-export-default-var/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Missing semicolon (1:27)
> 1 | declare export default var a: number
    |                           ^
  2 |],
  "input": "declare export default var a: number
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/declare-export/invalid-export-interface/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: \`declare export interface\` is not supported. Use \`export interface\` instead (1:16)
> 1 | declare export interface bar {}
    |                ^
  2 |],
  "input": "declare export interface bar {}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/declare-export/invalid-export-let/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: \`declare export let\` is not supported. Use \`declare export var\` instead (1:16)
> 1 | declare export let foo: number
    |                ^
  2 |],
  "input": "declare export let foo: number
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/declare-module/7/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:35)
> 1 | declare module A { declare module.foo: { foo(): number; } }
    |                                   ^
  2 |],
  "input": "declare module A { declare module.foo: { foo(): number; } }
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/declare-module/8/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Only declares and type imports are allowed inside declare module (2:3)
  1 | declare module A {
> 2 |   declar var a:number
    |   ^
  3 | }
  4 |],
  "input": "declare module A {
  declar var a:number
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/declare-statements/class-multiple-extends-invalid/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected "{" (1:26)
> 1 | declare class A extends B, C {}
    |                          ^
  2 |],
  "input": "declare class A extends B, C {}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/declare-statements/invalid/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:9)
> 1 | declare foobar
    |         ^
  2 |],
  "input": "declare foobar
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/declare-statements/invalid-literal/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Missing semicolon (1:8)
> 1 | declare 1;
    |        ^
  2 |],
  "input": "declare 1;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/enum-declaration/end-of-file/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (2:1)
  1 | enum
> 2 |
    | ^],
  "input": "enum
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-explicit-type-expression/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`E\`. (1:11)
> 1 | enum E of [] {
    |           ^
  2 | }
  3 |],
  "input": "enum E of [] {
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-initializer-expression-explicit-boolean/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Enum \`E\` has type \`boolean\`, so the initializer of \`A\` needs to be a boolean literal. (2:7)
  1 | enum E of boolean {
> 2 |   A = 1 + 2,
    |       ^
  3 | }
  4 |],
  "input": "enum E of boolean {
  A = 1 + 2,
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-initializer-expression-explicit-number/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Enum \`E\` has type \`number\`, so the initializer of \`A\` needs to be a number literal. (2:7)
  1 | enum E of number {
> 2 |   A = 1 + 2,
    |       ^
  3 | }
  4 |],
  "input": "enum E of number {
  A = 1 + 2,
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-initializer-expression-explicit-string/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Enum \`E\` has type \`string\`, so the initializer of \`A\` needs to be a string literal. (2:7)
  1 | enum E of string {
> 2 |   A = 1 + 2,
    |       ^
  3 | }
  4 |],
  "input": "enum E of string {
  A = 1 + 2,
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-initializer-expression-explicit-symbol/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Symbol enum members cannot be initialized. Use \`A,\` in enum \`E\`. (2:7)
  1 | enum E of symbol {
> 2 |   A = 1 + 2,
    |       ^
  3 | }
  4 |],
  "input": "enum E of symbol {
  A = 1 + 2,
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-initializer-expression-implicit/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: The enum member initializer for \`A\` needs to be a literal (2:7)
  1 | enum E {
> 2 |   A = 1 + 2,
    |       ^
  3 | }
  4 |],
  "input": "enum E {
  A = 1 + 2,
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-initializer-parenthesized/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: The enum member initializer for \`A\` needs to be a literal (2:7)
  1 | enum E {
> 2 |   A = (1),
    |       ^
  3 | }
  4 |],
  "input": "enum E {
  A = (1),
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/enum-declaration/unknown-members/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (4:3)
  2 |   A,
  3 |   B,
> 4 |   ...
    |   ^
  5 | }
  6 |],
  "input": "enum E {
  A,
  B,
  ...
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/enum-declaration/unknown-members-invalid/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (2:3)
  1 | enum E {
> 2 |   ...,
    |   ^
  3 | }
  4 |],
  "input": "enum E {
  ...,
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/internal-slot/interface-variance/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:15)
> 1 | interface T { +[[foo]](): X }
    |               ^
  2 |],
  "input": "interface T { +[[foo]](): X }
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/internal-slot/object-variance/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:12)
> 1 | type T = { +[[foo]]: X }
    |            ^
  2 |],
  "input": "type T = { +[[foo]]: X }
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/literal-types/invalid-number-negative/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected "number" or "bigint" (1:9)
> 1 | var a: -z
    |         ^
  2 |],
  "input": "var a: -z
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/literal-types/invalid-number-positive/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:8)
> 1 | var a: +1
    |        ^
  2 |],
  "input": "var a: +1
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/module-string-names/import-local-is-string/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: A string literal cannot be used as an imported binding.
- Did you mean \`import { "foo" as foo }\`? (1:10)
> 1 | import { "foo" } from "baz";
    |          ^
  2 |],
  "input": "import { \\"foo\\" } from \\"baz\\";
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/declare_opaque/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:24)
> 1 | declare opaque type ID = number;
    |                        ^
  2 |],
  "input": "declare opaque type ID = number;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_declare_export_t_and_st/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:37)
> 1 | declare export opaque type Foo: Bar = Baz
    |                                     ^
  2 |],
  "input": "declare export opaque type Foo: Bar = Baz
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_declare_export_t_no_st/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:32)
> 1 | declare export opaque type Foo = Bar
    |                                ^
  2 |],
  "input": "declare export opaque type Foo = Bar
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_declare_t_and_st/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:30)
> 1 | declare opaque type Foo: Bar = Baz
    |                              ^
  2 |],
  "input": "declare opaque type Foo: Bar = Baz
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_declare_t_no_st/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:25)
> 1 | declare opaque type Foo = Bar
    |                         ^
  2 |],
  "input": "declare opaque type Foo = Bar
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_invalid_decl1/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:23)
> 1 | declare export opaque = potato;
    |                       ^
  2 |],
  "input": "declare export opaque = potato;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_invalid_decl2/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:31)
> 1 | declare export opaque type ID = number;
    |                               ^
  2 |],
  "input": "declare export opaque type ID = number;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_invalid_decl3/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:23)
> 1 | declare export opaque potato ID = number;
    |                       ^
  2 |],
  "input": "declare export opaque potato ID = number;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_invalid1/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:15)
> 1 | export opaque potato ID = number;
    |               ^
  2 |],
  "input": "export opaque potato ID = number;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_invalid2/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:8)
> 1 | opaque potato ID = number;
    |        ^
  2 |],
  "input": "opaque potato ID = number;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_subtype_invalid1/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:8)
> 1 | opaque Ident: Type = SuperType;
    |        ^
  2 |],
  "input": "opaque Ident: Type = SuperType;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_subtype_invalid2/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:15)
> 1 | export opaque potato: ID = number;
    |               ^
  2 |],
  "input": "export opaque potato: ID = number;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_subtype_invalid3/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:8)
> 1 | opaque stuff: Box<T> = Container<T>
    |        ^
  2 |],
  "input": "opaque stuff: Box<T> = Container<T>
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/optional-type/2/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:14)
> 1 | const f = (x?)
    |              ^
  2 |],
  "input": "const f = (x?)
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/optional-type/5/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected "," (1:66)
> 1 | a ? b : c ? d : e ? f : g ? h : i ? j : k ? l : m ? n : (o ? p : =);
    |                                                                  ^
  2 |],
  "input": "a ? b : c ? d : e ? f : g ? h : i ? j : k ? l : m ? n : (o ? p : =);
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/proto-props/interface/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected ":" (2:9)
  1 | interface I {
> 2 |   proto p: string;
    |         ^
  3 | }
  4 |],
  "input": "interface I {
  proto p: string;
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/proto-props/object/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected ":" (1:18)
> 1 | type T = { proto p: string }
    |                  ^
  2 |],
  "input": "type T = { proto p: string }
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/proto-props/proto-static/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected ":" (2:16)
  1 | declare class C {
> 2 |   proto static p: T;
    |                ^
  3 | }
  4 |],
  "input": "declare class C {
  proto static p: T;
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/proto-props/static-proto/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected ":" (2:16)
  1 | declare class C {
> 2 |   static proto p: T;
    |                ^
  3 | }
  4 |],
  "input": "declare class C {
  static proto p: T;
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/regression/issue-58-ambiguous/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected ":" (4:28)
  2 | // a ? b : (c => ((d): e => f))
  3 | // a ? ((b): c => d) : (e => f)
> 4 | a ? (b) : c => (d) : e => f;
    |                            ^
  5 |],
  "input": "// This can be parsed in two ways:
// a ? b : (c => ((d): e => f))
// a ? ((b): c => d) : (e => f)
a ? (b) : c => (d) : e => f;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/regression/issue-321-failing/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected "," (1:28)
> 1 | const fn: ( Object, Object Object ) => void = ( o1, o2, ) => o1;
    |                            ^
  2 |],
  "input": "const fn: ( Object, Object Object ) => void = ( o1, o2, ) => o1;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/regression/issue-2154/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:3)
> 1 | !()=>0
    |   ^
  2 |],
  "input": "!()=>0
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/this-annotation/function-type/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected ")" (1:16)
> 1 | type T = (this : number, a : string, b : number) => void
    |                ^
  2 |
  3 | type U = (this : number, ...c : any) => void
  4 |],
  "input": "type T = (this : number, a : string, b : number) => void

type U = (this : number, ...c : any) => void

type V = (this : number) => void

type Q = <T>(this : T) => void
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/this-annotation/this-optional-type/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected ")" (1:15)
> 1 | type T = (this? : number) => void
    |               ^
  2 |],
  "input": "type T = (this? : number) => void
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-annotations/106/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:8)
> 1 | var f: >x:int) => string;
    |        ^
  2 |],
  "input": "var f: >x:int) => string;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-annotations/109/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:20)
> 1 | var a : { x: number{ y: string } } = { x: 0, y: 'foo' };
    |                    ^
  2 |],
  "input": "var a : { x: number{ y: string } } = { x: 0, y: 'foo' };
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-annotations/112/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:11)
> 1 | type X = {+m(): T}
    |           ^
  2 |],
  "input": "type X = {+m(): T}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-annotations/113/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:11)
> 1 | type X = {-m(): T}
    |           ^
  2 |
  3 |],
  "input": "type X = {-m(): T}

",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-annotations/116/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:11)
> 1 | type X = {+():T}
    |           ^
  2 |],
  "input": "type X = {+():T}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-annotations/117/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:11)
> 1 | type X = {-():T}
    |           ^
  2 |],
  "input": "type X = {-():T}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-annotations/120/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:10)
> 1 | class A {+m():T}
    |          ^
  2 |],
  "input": "class A {+m():T}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-annotations/121/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:10)
> 1 | class A {-m():T}
    |          ^
  2 |],
  "input": "class A {-m():T}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-annotations/122/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:3)
> 1 | ({+p:e})
    |   ^
  2 |],
  "input": "({+p:e})
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-annotations/123/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:3)
> 1 | ({-p:e})
    |   ^
  2 |],
  "input": "({-p:e})
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-annotations/124/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:19)
> 1 | class C { static  + m() {} }
    |                   ^
  2 |],
  "input": "class C { static  + m() {} }
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-annotations/125/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:27)
> 1 | declare class C { static  + m() {} }
    |                           ^
  2 |],
  "input": "declare class C { static  + m() {} }
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-annotations/126/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:4)
> 1 | ({ + m() {} });
    |    ^
  2 |],
  "input": "({ + m() {} });
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-annotations/invalid-line-terminator-arrow/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:2)
> 1 | (): string
    |  ^
  2 | => {}],
  "input": "(): string
=> {}",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-annotations/typeof-reserved-invalid-1/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected "{" (2:27)
  1 | // @flow
> 2 | const x: typeof interface = "hi";
    |                           ^
  3 |],
  "input": "// @flow
const x: typeof interface = \\"hi\\";
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-annotations/typeof-reserved-invalid-5/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (2:24)
  1 | // @flow
> 2 | const x: typeof typeof = "hi";
    |                        ^
  3 |],
  "input": "// @flow
const x: typeof typeof = \\"hi\\";
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-exports/star-as-from/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:15)
> 1 | export type * as fooTypes from "foo";
    |               ^
  2 |],
  "input": "export type * as fooTypes from \\"foo\\";
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-generics/async-arrow-invalid/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Type parameters must come after the async keyword, e.g. instead of \`<T> async (1:1)
> 1 | <T> async () => {}
    | ^
  2 |],
  "input": "<T> async () => {}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-imports/invalid-import-type-namespace/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:13)
> 1 | import type * as namespace from "bar";
    |             ^
  2 |],
  "input": "import type * as namespace from \\"bar\\";
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/arrow_error_with_jsx/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unterminated JSX contents (1:4)
> 1 | <T>"I'm not an arrow function"
    |    ^
  2 |],
  "input": "<T>\\"I'm not an arrow function\\"
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/arrow_error_without_jsx/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unterminated JSX contents (1:4)
> 1 | <T>"I'm not an arrow function"
    |    ^
  2 |],
  "input": "<T>\\"I'm not an arrow function\\"
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/default-invalid-class-extends/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected "," (1:21)
> 1 | class A extends B<T = number> {}
    |                     ^
  2 |],
  "input": "class A extends B<T = number> {}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/default-invalid-declare-func/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected ":" (1:36)
> 1 | declare function foo<T = string>() {}
    |                                    ^
  2 |],
  "input": "declare function foo<T = string>() {}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/default-invalid-var-type/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected "," (1:16)
> 1 | var x: Array<T = number>
    |                ^
  2 |],
  "input": "var x: Array<T = number>
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/empty/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (2:10)
  1 | // Type parameter declaration may not have 0 type parameters
> 2 | type Foo<> = number;
    |          ^
  3 |],
  "input": "// Type parameter declaration may not have 0 type parameters
type Foo<> = number;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/error-object-property-type-param/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (3:1)
  1 | const s = {
  2 |   p<T>
> 3 | }
    | ^
  4 |],
  "input": "const s = {
  p<T>
}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/invalid-getter/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected "(" (2:11)
  1 | const obj = {
> 2 |   get prop<T>() {},
    |           ^
  3 | };],
  "input": "const obj = {
  get prop<T>() {},
};",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/invalid-setter/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token, expected "(" (2:11)
  1 | const obj = {
> 2 |   set prop<T>(a) {},
    |           ^
  3 | };],
  "input": "const obj = {
  set prop<T>(a) {},
};",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/star/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (2:10)
  1 | // Star is only for type parameter initialization
> 2 | type Foo<*> = number;
    |          ^
  3 |],
  "input": "// Star is only for type parameter initialization
type Foo<*> = number;
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/typecasts/fail-in-async-optional-calls/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token (1:22)
> 1 | async?.(bar: string) => {}
    |                      ^
  2 |],
  "input": "async?.(bar: string) => {}
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/typecasts/generic-arrow-func-invalid/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unterminated JSX contents (1:13)
> 1 | <T>(() => {}: any);
    |             ^
  2 |],
  "input": "<T>(() => {}: any);
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;

exports[`tests-compare/fixtures/babel/packages/babel-parser/test/fixtures/flow/typecasts/generic-arrow-func-invalid-parenthesized/input.js
Options: {"parser":"babel-flow"} 1`] = `
Object {
  "error": [SyntaxError: Unterminated JSX contents (1:13)
> 1 | <T>(() => {}: any);
    |             ^
  2 |],
  "input": "<T>(() => {}: any);
",
  "options": Object {
    "parser": "babel-flow",
  },
}
`;
