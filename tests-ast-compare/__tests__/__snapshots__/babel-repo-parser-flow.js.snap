// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel/packages/babel-parser/test/fixtures/flow/anonymous-function-no-parens-types/bad_01/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=>\`, expected the token \`;\` (1:28)
> 1 | var f = (x): number => 123 => 123;
    |                            ^^
  2 |],
  "input": "var f = (x): number => 123 => 123;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/anonymous-function-no-parens-types/bad_02/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=>\`, expected the token \`;\` (1:37)
> 1 | var f = (x): string | number => 123 => 123;
    |                                     ^^
  2 |],
  "input": "var f = (x): string | number => 123 => 123;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/anonymous-function-types/bad_01/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=>\`, expected the token \`;\` (1:30)
> 1 | var f = (x): (number) => 123 => 123;
    |                              ^^
  2 |],
  "input": "var f = (x): (number) => 123 => 123;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/anonymous-function-types/bad_02/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=>\`, expected the token \`;\` (1:39)
> 1 | var f = (x): string | (number) => 123 => 123;
    |                                       ^^
  2 |],
  "input": "var f = (x): string | (number) => 123 => 123;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/anonymous-function-types/bad_03/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=>\`, expected the token \`;\` (1:31)
> 1 | var f = (x): ?(number) => 123 => 123;
    |                               ^^
  2 |],
  "input": "var f = (x): ?(number) => 123 => 123;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/class-private-property/declare-field-initializer/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=\`. Initializers are not allowed in a \`declare\`. (2:16)
  1 | class A {
> 2 |   declare #foo = 2
    |                ^
  3 | }
  4 |],
  "input": "class A {
  declare #foo = 2
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/class-private-property/declare-method/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: \`declare\` modifier can only appear on class fields. (2:3)
  1 | class A {
> 2 |   declare #foo() {}
    |   ^^^^^^^
  3 | }
  4 |],
  "input": "class A {
  declare #foo() {}
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/class-properties/declare-before-decorators/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`@\`, expected an identifier (2:11)
  1 | class A {
> 2 |   declare @dec foo
    |           ^
  3 | }
  4 |],
  "input": "class A {
  declare @dec foo
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/class-properties/declare-constructor/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: \`declare\` modifier can only appear on class fields. (2:3)
  1 | class A {
> 2 |   declare constructor() {}
    |   ^^^^^^^
  3 | }
  4 |],
  "input": "class A {
  declare constructor() {}
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/class-properties/declare-field-initializer/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=\`. Initializers are not allowed in a \`declare\`. (2:15)
  1 | class A {
> 2 |   declare foo = 2
    |               ^
  3 | }
  4 |],
  "input": "class A {
  declare foo = 2
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/class-properties/declare-field-named-static/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`}\`, expected an identifier (3:1)
  1 | class A {
  2 |   declare static
> 3 | }
    | ^
  4 |],
  "input": "class A {
  declare static
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/class-properties/declare-method/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: \`declare\` modifier can only appear on class fields. (2:3)
  1 | class A {
> 2 |   declare foo() {}
    |   ^^^^^^^
  3 | }
  4 |],
  "input": "class A {
  declare foo() {}
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/class-properties/invalid-getter-setter/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`:\`, expected the token \`(\` (2:8)
  1 | declare class B {
> 2 |   get a: number;
    |        ^
  3 | }
  4 |],
  "input": "declare class B {
  get a: number;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/class-properties/static-declare-field/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the token \`(\` (2:18)
  1 | class A {
> 2 |   static declare foo
    |                  ^^^
  3 | }
  4 |],
  "input": "class A {
  static declare foo
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/classes/constructor-override-with-class-prop-plugin/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Classes may not have fields named \`constructor\`. (2:3)
  1 | class Foo {
> 2 |   constructor: () => this;
    |   ^^^^^^^^^^^
  3 | }
  4 |],
  "input": "class Foo {
  constructor: () => this;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/classes/mixins-error/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the token \`{\` (1:9)
> 1 | class A mixins B {}
    |         ^^^^^^
  2 |],
  "input": "class A mixins B {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/comment/06-type-include-error/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected end of input (4:1)
  2 |   /* :: prop: string;
  3 | }
> 4 |
    | ^],
  "input": "class MyClass {
  /* :: prop: string;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/comment/07-type-include-error/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected end of input (7:1)
  5 |   baz: string
  6 | };
> 7 |
    | ^],
  "input": "/*::
type Foo = {
  foo: number,
  bar: boolean,
  baz: string
};
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/comment/08-type-flow-include-error/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected end of input (7:1)
  5 |   baz: string
  6 | };
> 7 |
    | ^],
  "input": "/* flow-include
type Foo = {
  foo: number,
  bar: boolean,
  baz: string
};
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/comment/09-type-flow-include-error/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected end of input (4:1)
  2 |   /*flow-include prop: string;
  3 | }
> 4 |
    | ^],
  "input": "class MyClass {
  /*flow-include prop: string;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/comment/10-type-annotation-error/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected end of input (3:1)
  1 | function method(param /*: string) {
  2 | }
> 3 |
    | ^],
  "input": "function method(param /*: string) {
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/comment/11-nested-comments-invalid/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`*/\`. Did you mean \`*-/\`? (1:12)
> 1 | /*:: /*asd */
    |            ^^
  2 |],
  "input": "/*:: /*asd */
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/comment/12-line-comment-nested-invalid/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected end of input (2:1)
  1 | /*:: //asd */
> 2 |
    | ^],
  "input": "/*:: //asd */
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/comment/13-nested-flow-comments-invalid/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`/*flow-include\` (1:6)
> 1 | /*:: /*flow-include */
    |      ^^^^^^^^^^^^^^
  2 |],
  "input": "/*:: /*flow-include */
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-class/implements-with-mixin-order/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the token \`{\` (1:30)
> 1 | declare class A implements B mixins C {}
    |                              ^^^^^^
  2 |],
  "input": "declare class A implements B mixins C {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-export/export-type-star-from/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`*\`, expected an identifier (1:44)
> 1 | declare module "foo" { declare export type * from "bar"; }
    |                                            ^],
  "input": "declare module \\"foo\\" { declare export type * from \\"bar\\"; }",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-export/invalid-declare-export-type/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: \`declare export type\` is not supported. Use \`export type\` instead. (1:16)
> 1 | declare export type foo = number;
    |                ^^^^
  2 |],
  "input": "declare export type foo = number;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-export/invalid-export-arrow/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`(\`, expected the token \`{\` (1:16)
> 1 | declare export (a:number) => number
    |                ^
  2 |],
  "input": "declare export (a:number) => number
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-export/invalid-export-const/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: \`declare export const\` is not supported. Use \`declare export var\` instead. (1:16)
> 1 | declare export const foo: number
    |                ^^^^^
  2 |],
  "input": "declare export const foo: number
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-export/invalid-export-default-function/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`(\`, expected an identifier (1:33)
> 1 | declare export default function (p1: number): string;
    |                                 ^
  2 |],
  "input": "declare export default function (p1: number): string;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-export/invalid-export-default-var/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the token \`;\` (1:28)
> 1 | declare export default var a: number
    |                            ^
  2 |],
  "input": "declare export default var a: number
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-export/invalid-export-interface/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: \`declare export interface\` is not supported. Use \`export interface\` instead. (1:16)
> 1 | declare export interface bar {}
    |                ^^^^^^^^^
  2 |],
  "input": "declare export interface bar {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-export/invalid-export-let/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: \`declare export let\` is not supported. Use \`declare export var\` instead. (1:16)
> 1 | declare export let foo: number
    |                ^^^
  2 |],
  "input": "declare export let foo: number
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-module/7/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the identifier \`exports\` (1:35)
> 1 | declare module A { declare module.foo: { foo(): number; } }
    |                                   ^^^
  2 |],
  "input": "declare module A { declare module.foo: { foo(): number; } }
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-module/8/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the token \`declare\` (2:3)
  1 | declare module A {
> 2 |   declar var a:number
    |   ^^^^^^
  3 | }
  4 |],
  "input": "declare module A {
  declar var a:number
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-module/invalid-commonjs-module/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Found both \`declare module.exports\` and \`declare export\` in the same module. Modules can only have 1 since they are either an ES module xor they are a CommonJS module. (1:87)
> 1 | declare module "foo" { declare module.exports: number; declare export var a: number;  }
    |                                                                                       ^
  2 |],
  "input": "declare module \\"foo\\" { declare module.exports: number; declare export var a: number;  }
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-module/invalid-es-module/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Found both \`declare module.exports\` and \`declare export\` in the same module. Modules can only have 1 since they are either an ES module xor they are a CommonJS module. (1:86)
> 1 | declare module "foo" { declare export var a: number; declare module.exports: number; }
    |                                                                                      ^
  2 |],
  "input": "declare module \\"foo\\" { declare export var a: number; declare module.exports: number; }
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-module/invalid-import/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Imports within a \`declare module\` body must always be \`import type\` or \`import typeof\`! (1:22)
> 1 | declare module "M" { import T from "TM"; }
    |                      ^^^^^^
  2 |],
  "input": "declare module \\"M\\" { import T from \\"TM\\"; }
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-module/invalid-module-in-module/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the token \`.\` (1:35)
> 1 | declare module A { declare module B {} }
    |                                   ^
  2 |],
  "input": "declare module A { declare module B {} }
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-module/invalid-multiple-commonjs/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Duplicate \`declare module.exports\` statement! (1:88)
> 1 | declare module "foo" { declare module.exports: string; declare module.exports: number; }
    |                                                                                        ^
  2 |],
  "input": "declare module \\"foo\\" { declare module.exports: string; declare module.exports: number; }
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-statements/class-multiple-extends-invalid/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`,\`, expected the token \`{\` (1:26)
> 1 | declare class A extends B, C {}
    |                          ^
  2 |],
  "input": "declare class A extends B, C {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-statements/invalid/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the end of an expression statement (\`;\`) (1:9)
> 1 | declare foobar
    |         ^^^^^^
  2 |],
  "input": "declare foobar
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/declare-statements/invalid-literal/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected number, expected the end of an expression statement (\`;\`) (1:9)
> 1 | declare 1;
    |         ^
  2 |],
  "input": "declare 1;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/boolean-member-not-initialized-explicit/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Boolean enum members need to be initialized. Use either \`A = true,\` or \`A = false,\` in enum \`E\`. (2:3)
  1 | enum E of boolean {
> 2 |   A,
    |   ^
  3 | }
  4 |],
  "input": "enum E of boolean {
  A,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/boolean-member-not-initialized-implicit/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Boolean enum members need to be initialized. Use either \`A = true,\` or \`A = false,\` in enum \`E\`. (2:3)
  1 | enum E {
> 2 |   A,
    |   ^
  3 |   B = true,
  4 | }
  5 |],
  "input": "enum E {
  A,
  B = true,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/duplicate-member-name/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Enum member names need to be unique, but the name \`A\` has already been used before in enum \`E\`. (3:3)
  1 | enum E {
  2 |   A,
> 3 |   A,
    |   ^
  4 | }
  5 |],
  "input": "enum E {
  A,
  A,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/end-of-file/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected end of input, expected an identifier (2:1)
  1 | enum
> 2 |
    | ^],
  "input": "enum
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/inconsistent-member-values-majority-defaulted/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Enum \`E\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers. (1:6)
> 1 | enum E {
    |      ^
  2 |   A,
  3 |   B,
  4 |   C = 3,],
  "input": "enum E {
  A,
  B,
  C = 3,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/inconsistent-member-values-mixed-initializers/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Enum \`E\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers. (1:6)
> 1 | enum E {
    |      ^
  2 |   A = 1,
  3 |   B = true,
  4 | }],
  "input": "enum E {
  A = 1,
  B = true,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-explicit-type-expression/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`E\`. (1:11)
> 1 | enum E of [] {
    |           ^
  2 | }
  3 |],
  "input": "enum E of [] {
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-explicit-type-identifier/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Enum type \`xxx\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`E\`. (1:11)
> 1 | enum E of xxx {
    |           ^^^
  2 | }
  3 |],
  "input": "enum E of xxx {
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-initializer-boolean-explicit-string/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Enum \`E\` has type \`string\`, so the initializer of \`A\` needs to be a string literal. (2:7)
  1 | enum E of string {
> 2 |   A = true,
    |       ^^^^
  3 | }
  4 |],
  "input": "enum E of string {
  A = true,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-initializer-expression-explicit-boolean/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Enum \`E\` has type \`boolean\`, so the initializer of \`A\` needs to be a boolean literal. (2:7)
  1 | enum E of boolean {
> 2 |   A = 1 + 2,
    |       ^
  3 | }
  4 |],
  "input": "enum E of boolean {
  A = 1 + 2,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-initializer-expression-explicit-number/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Enum \`E\` has type \`number\`, so the initializer of \`A\` needs to be a number literal. (2:7)
  1 | enum E of number {
> 2 |   A = 1 + 2,
    |       ^
  3 | }
  4 |],
  "input": "enum E of number {
  A = 1 + 2,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-initializer-expression-explicit-string/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Enum \`E\` has type \`string\`, so the initializer of \`A\` needs to be a string literal. (2:7)
  1 | enum E of string {
> 2 |   A = 1 + 2,
    |       ^
  3 | }
  4 |],
  "input": "enum E of string {
  A = 1 + 2,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-initializer-expression-explicit-symbol/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Symbol enum members cannot be initialized. Use \`A,\` in enum \`E\`. (2:7)
  1 | enum E of symbol {
> 2 |   A = 1 + 2,
    |       ^
  3 | }
  4 |],
  "input": "enum E of symbol {
  A = 1 + 2,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-initializer-expression-implicit/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: The enum member initializer for \`A\` needs to be a literal (either a boolean, number, or string) in enum \`E\`. (2:7)
  1 | enum E {
> 2 |   A = 1 + 2,
    |       ^
  3 | }
  4 |],
  "input": "enum E {
  A = 1 + 2,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-initializer-literal-explicit-symbol/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Symbol enum members cannot be initialized. Use \`A,\` in enum \`E\`. (2:7)
  1 | enum E of symbol {
> 2 |   A = 1,
    |       ^
  3 | }
  4 |],
  "input": "enum E of symbol {
  A = 1,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-initializer-number-explicit-boolean/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Enum \`E\` has type \`boolean\`, so the initializer of \`A\` needs to be a boolean literal. (2:7)
  1 | enum E of boolean {
> 2 |   A = 1,
    |       ^
  3 | }
  4 |],
  "input": "enum E of boolean {
  A = 1,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-initializer-number-explicit-string/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Enum \`E\` has type \`string\`, so the initializer of \`A\` needs to be a string literal. (2:7)
  1 | enum E of string {
> 2 |   A = 1,
    |       ^
  3 | }
  4 |],
  "input": "enum E of string {
  A = 1,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-initializer-parenthesized/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: The enum member initializer for \`A\` needs to be a literal (either a boolean, number, or string) in enum \`E\`. (2:7)
  1 | enum E {
> 2 |   A = (1),
    |       ^
  3 | }
  4 |],
  "input": "enum E {
  A = (1),
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-initializer-string-explicit-boolean/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Enum \`E\` has type \`boolean\`, so the initializer of \`A\` needs to be a boolean literal. (2:7)
  1 | enum E of boolean {
> 2 |   A = "hi",
    |       ^^^^
  3 | }
  4 |],
  "input": "enum E of boolean {
  A = \\"hi\\",
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-initializer-string-explicit-number/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Enum \`E\` has type \`number\`, so the initializer of \`A\` needs to be a number literal. (2:7)
  1 | enum E of number {
> 2 |   A = "hi",
    |       ^^^^
  3 | }
  4 |],
  "input": "enum E of number {
  A = \\"hi\\",
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/invalid-member-name/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`foo\`, consider using \`Foo\`, in enum \`E\`. (2:3)
  1 | enum E {
> 2 |   foo,
    |   ^^^
  3 |   bar,
  4 | }
  5 |],
  "input": "enum E {
  foo,
  bar,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/number-member-not-initialized-explicit/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Number enum members need to be initialized, e.g. \`A = 1,\` in enum \`E\`. (2:3)
  1 | enum E of number {
> 2 |   A,
    |   ^
  3 | }
  4 |],
  "input": "enum E of number {
  A,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/number-member-not-initialized-implicit/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Number enum members need to be initialized, e.g. \`A = 1,\` in enum \`E\`. (2:3)
  1 | enum E {
> 2 |   A,
    |   ^
  3 |   B = 1,
  4 | }
  5 |],
  "input": "enum E {
  A,
  B = 1,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/reserved-word-enum-name/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`class\` (1:6)
> 1 | enum class {
    |      ^^^^^
  2 | }
  3 |],
  "input": "enum class {
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/string-member-inconsistently-initialized-majority-defaulted/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: String enum members need to consistently either all use initializers, or use no initializers, in enum E. (2:3)
  1 | enum E of string {
> 2 |   A = "a",
    |   ^^^^^^^
  3 |   B,
  4 |   C,
  5 | }],
  "input": "enum E of string {
  A = \\"a\\",
  B,
  C,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/string-member-inconsistently-initialized-majority-initialized/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: String enum members need to consistently either all use initializers, or use no initializers, in enum E. (2:3)
  1 | enum E of string {
> 2 |   A,
    |   ^
  3 |   B = "b",
  4 |   C = "c",
  5 | }],
  "input": "enum E of string {
  A,
  B = \\"b\\",
  C = \\"c\\",
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/enum-declaration/unknown-members-invalid/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: The \`...\` must come at the end of the enum body. Remove the trailing comma. (2:3)
  1 | enum E {
> 2 |   ...,
    |   ^^^
  3 | }
  4 |],
  "input": "enum E {
  ...,
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/explicit-inexact-object/explicit_inexact_disallowed_in_non_objects1/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Explicit inexact syntax can only appear inside an object type (3:3)
  1 | //@flow
  2 | declare class A {
> 3 |   ...;
    |   ^^^
  4 | }
  5 |],
  "input": "//@flow
declare class A {
  ...;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/explicit-inexact-object/explicit_inexact_disallowed_in_non_objects2/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Explicit inexact syntax can only appear inside an object type (4:3)
  2 | declare class B {
  3 |   foo: number;
> 4 |   ...;
    |   ^^^
  5 | }
  6 |],
  "input": "//@flow
declare class B {
  foo: number;
  ...;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/explicit-inexact-object/explicit_inexact_disallowed_in_non_objects3/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Explicit inexact syntax can only appear inside an object type (3:3)
  1 | //@flow
  2 | declare class C {
> 3 |   ...;
    |   ^^^
  4 |   foo: number;
  5 | }
  6 |],
  "input": "//@flow
declare class C {
  ...;
  foo: number;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/explicit-inexact-object/explicit_inexact_disallowed_in_non_objects4/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Explicit inexact syntax can only appear inside an object type (4:3)
  2 | declare class D {
  3 |   foo: number;
> 4 |   ...;
    |   ^^^
  5 |   bar: number;
  6 | }
  7 |],
  "input": "//@flow
declare class D {
  foo: number;
  ...;
  bar: number;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/explicit-inexact-object/explicit_inexact_disallowed_in_non_objects5/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Explicit inexact syntax can only appear inside an object type (4:3)
  2 | interface F {
  3 |   foo: number;
> 4 |   ...;
    |   ^^^
  5 | }
  6 |],
  "input": "//@flow
interface F {
  foo: number;
  ...;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/explicit-inexact-object/explicit_inexact_disallowed_in_non_objects6/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Explicit inexact syntax can only appear inside an object type (3:3)
  1 | //@flow
  2 | interface G {
> 3 |   ...;
    |   ^^^
  4 |   foo: number;
  5 | }
  6 |],
  "input": "//@flow
interface G {
  ...;
  foo: number;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/explicit-inexact-object/explicit_inexact_disallowed_in_non_objects7/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Explicit inexact syntax can only appear inside an object type (4:3)
  2 | interface H {
  3 |   foo: number;
> 4 |   ...;
    |   ^^^
  5 |   bar: number;
  6 | }
  7 |],
  "input": "//@flow
interface H {
  foo: number;
  ...;
  bar: number;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/explicit-inexact-object/explicit_inexact_forbidden_in_exact/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Explicit inexact syntax cannot appear inside an explicit exact object type (2:26)
  1 | //@flow
> 2 | type T = {| foo: number, ... |}
    |                          ^^^
  3 |],
  "input": "//@flow
type T = {| foo: number, ... |}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/explicit-inexact-object/explicit_inexact_must_appear_last/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Explicit inexact syntax must come at the end of an object type (2:11)
  1 | //@flow
> 2 | type T = {..., foo: number};
    |           ^^^
  3 |],
  "input": "//@flow
type T = {..., foo: number};
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/explicit-inexact-object/explicit_inexact_object_invalid1/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Explicit inexact syntax must come at the end of an object type (2:22)
  1 | //@flow
> 2 | type T = {x: number, ..., y: number};
    |                      ^^^
  3 |],
  "input": "//@flow
type T = {x: number, ..., y: number};
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/explicit-inexact-object/explicit_inexact_object_invalid2/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Explicit inexact syntax must come at the end of an object type (2:22)
  1 | //@flow
> 2 | type U = {x: number, ..., ...};
    |                      ^^^
  3 |],
  "input": "//@flow
type U = {x: number, ..., ...};
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/explicit-inexact-object/explicit_inexact_object_invalid3/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Explicit inexact syntax must come at the end of an object type (2:22)
  1 | //@flow
> 2 | type V = {x: number, ..., ...X};
    |                      ^^^
  3 |],
  "input": "//@flow
type V = {x: number, ..., ...X};
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/interface-types/extends-multiple-reserved-invalid-1/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (2:24)
  1 | // @flow
> 2 | interface I extends X, bool {}
    |                        ^^^^
  3 |],
  "input": "// @flow
interface I extends X, bool {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/interface-types/extends-multiple-reserved-invalid-2/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (2:24)
  1 | // @flow
> 2 | interface I extends X, bool.m {}
    |                        ^^^^
  3 |],
  "input": "// @flow
interface I extends X, bool.m {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/interface-types/extends-reserved-invalid-1/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (2:21)
  1 | // @flow
> 2 | interface I extends bool {}
    |                     ^^^^
  3 |],
  "input": "// @flow
interface I extends bool {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/interface-types/extends-reserved-invalid-2/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (2:21)
  1 | // @flow
> 2 | interface I extends bool.m {}
    |                     ^^^^
  3 |],
  "input": "// @flow
interface I extends bool.m {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/interfaces-as-identifier/class-declaration/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Use of future reserved word in strict mode (1:7)
> 1 | class interface {}
    |       ^^^^^^^^^
  2 |],
  "input": "class interface {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/interfaces-as-identifier/import-statement/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Use of future reserved word in strict mode (1:8)
> 1 | import interface from "foo";
    |        ^^^^^^^^^
  2 |],
  "input": "import interface from \\"foo\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/interfaces-module-and-script/id-reserved-type-invalid/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (1:11)
> 1 | interface string {}
    |           ^^^^^^
  2 |],
  "input": "interface string {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/interfaces-module-and-script/implements-reserved-type-invalid/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (1:22)
> 1 | class Foo implements string {}
    |                      ^^^^^^
  2 |],
  "input": "class Foo implements string {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/interfaces-module-and-script/implements-reserved-type-invalid-2/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (1:27)
> 1 | class Foo implements Bar, string {}
    |                           ^^^^^^
  2 |],
  "input": "class Foo implements Bar, string {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/internal-slot/interface-variance/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected variance sigil (1:15)
> 1 | interface T { +[[foo]](): X }
    |               ^
  2 |],
  "input": "interface T { +[[foo]](): X }
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/internal-slot/object-variance/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected variance sigil (1:12)
> 1 | type T = { +[[foo]]: X }
    |            ^
  2 |],
  "input": "type T = { +[[foo]]: X }
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/iterator/07/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`@\`, expected an identifier (1:6)
> 1 | type @@iterator = number
    |      ^
  2 |],
  "input": "type @@iterator = number
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/iterator/08/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`@\`, expected an identifier (1:6)
> 1 | type @@asyncIterator = number
    |      ^
  2 |],
  "input": "type @@asyncIterator = number
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/iterator/11/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`@\`, expected an identifier (2:3)
  1 | let x = {
> 2 |   @@random() {}
    |   ^
  3 | }
  4 |],
  "input": "let x = {
  @@random() {}
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/literal-types/invalid-number-negative/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`-\` (1:8)
> 1 | var a: -z
    |        ^
  2 |],
  "input": "var a: -z
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/literal-types/invalid-number-positive/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`+\` (1:8)
> 1 | var a: +1
    |        ^
  2 |],
  "input": "var a: +1
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/module-string-names/default-import/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected string, expected an identifier (1:9)
> 1 | import {"default" as quotation} from "Confucius";
    |         ^^^^^^^^^
  2 |],
  "input": "import {\\"default\\" as quotation} from \\"Confucius\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/module-string-names/import-local-is-string/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected string, expected an identifier (1:10)
> 1 | import { "foo" } from "baz";
    |          ^^^^^
  2 |],
  "input": "import { \\"foo\\" } from \\"baz\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/module-string-names/mixed/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected string, expected an identifier (1:10)
> 1 | import { "foo" as bar, "default" as qux } from "module-a";
    |          ^^^^^
  2 | export * as "foo", { default as "quux" } from "module-b";
  3 |],
  "input": "import { \\"foo\\" as bar, \\"default\\" as qux } from \\"module-a\\";
export * as \\"foo\\", { default as \\"quux\\" } from \\"module-b\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/module-string-names/named-imports/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected string, expected an identifier (1:9)
> 1 | import {"學而時習之，不亦說乎？" as quotation} from "Confucius";
    |         ^^^^^^^^^^^^^
  2 |],
  "input": "import {\\"學而時習之，不亦說乎？\\" as quotation} from \\"Confucius\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/object-types/invalid-getter-param-count/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Getter should have zero parameters (2:7)
  1 | type B = {
> 2 |   get a(foo:number): number;
    |       ^
  3 | }
  4 |],
  "input": "type B = {
  get a(foo:number): number;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/object-types/invalid-getter-param-count-rest/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Getter should have zero parameters (2:7)
  1 | type B = {
> 2 |   get a(...foo): number;
    |       ^
  3 | }
  4 |],
  "input": "type B = {
  get a(...foo): number;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/object-types/invalid-setter-param-count/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Setter should have exactly one parameter (2:7)
  1 | type B = {
> 2 |   set a(): void;
    |       ^
  3 | }
  4 |],
  "input": "type B = {
  set a(): void;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/object-types/invalid-setter-param-type/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Setter should have exactly one parameter (2:7)
  1 | type B = {
> 2 |   set a(...w): void;
    |       ^
  3 | }
  4 |],
  "input": "type B = {
  set a(...w): void;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/declare_opaque/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=\`. Initializers are not allowed in a \`declare opaque type\`. (1:24)
> 1 | declare opaque type ID = number;
    |                        ^
  2 |],
  "input": "declare opaque type ID = number;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_declare_export_t_and_st/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=\`. Initializers are not allowed in a \`declare opaque type\`. (1:37)
> 1 | declare export opaque type Foo: Bar = Baz
    |                                     ^
  2 |],
  "input": "declare export opaque type Foo: Bar = Baz
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_declare_export_t_no_st/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=\`. Initializers are not allowed in a \`declare opaque type\`. (1:32)
> 1 | declare export opaque type Foo = Bar
    |                                ^
  2 |],
  "input": "declare export opaque type Foo = Bar
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_declare_t_and_st/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=\`. Initializers are not allowed in a \`declare opaque type\`. (1:30)
> 1 | declare opaque type Foo: Bar = Baz
    |                              ^
  2 |],
  "input": "declare opaque type Foo: Bar = Baz
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_declare_t_no_st/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=\`. Initializers are not allowed in a \`declare opaque type\`. (1:25)
> 1 | declare opaque type Foo = Bar
    |                         ^
  2 |],
  "input": "declare opaque type Foo = Bar
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_invalid_decl1/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=\`, expected the token \`type\` (1:23)
> 1 | declare export opaque = potato;
    |                       ^
  2 |],
  "input": "declare export opaque = potato;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_invalid_decl2/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=\`. Initializers are not allowed in a \`declare opaque type\`. (1:31)
> 1 | declare export opaque type ID = number;
    |                               ^
  2 |],
  "input": "declare export opaque type ID = number;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_invalid_decl3/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the token \`type\` (1:23)
> 1 | declare export opaque potato ID = number;
    |                       ^^^^^^
  2 |],
  "input": "declare export opaque potato ID = number;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_invalid1/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the token \`type\` (1:15)
> 1 | export opaque potato ID = number;
    |               ^^^^^^
  2 |],
  "input": "export opaque potato ID = number;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_invalid2/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the end of an expression statement (\`;\`) (1:8)
> 1 | opaque potato ID = number;
    |        ^^^^^^
  2 |],
  "input": "opaque potato ID = number;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_subtype_invalid1/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the end of an expression statement (\`;\`) (1:8)
> 1 | opaque Ident: Type = SuperType;
    |        ^^^^^
  2 |],
  "input": "opaque Ident: Type = SuperType;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_subtype_invalid2/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the token \`type\` (1:15)
> 1 | export opaque potato: ID = number;
    |               ^^^^^^
  2 |],
  "input": "export opaque potato: ID = number;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/opaque_subtype_invalid3/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the end of an expression statement (\`;\`) (1:8)
> 1 | opaque stuff: Box<T> = Container<T>
    |        ^^^^^
  2 |],
  "input": "opaque stuff: Box<T> = Container<T>
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/opaque-type-alias/reserved-type-invalid/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (1:13)
> 1 | opaque type string = number;
    |             ^^^^^^
  2 |],
  "input": "opaque type string = number;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/optional-type/2/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`)\` (1:14)
> 1 | const f = (x?)
    |              ^
  2 |],
  "input": "const f = (x?)
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/optional-type/5/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=\` (1:66)
> 1 | a ? b : c ? d : e ? f : g ? h : i ? j : k ? l : m ? n : (o ? p : =);
    |                                                                  ^
  2 |],
  "input": "a ? b : c ? d : e ? f : g ? h : i ? j : k ? l : m ? n : (o ? p : =);
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/optional-type/6/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`?\`, expected the token \`,\` (1:14)
> 1 | function f([]?, {}) {}
    |              ^
  2 |],
  "input": "function f([]?, {}) {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/predicates/4/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`:\`, expected the token \`;\` (1:19)
> 1 | var f = (x: mixed): % checks => typeof x === "string";
    |                   ^
  2 |],
  "input": "var f = (x: mixed): % checks => typeof x === \\"string\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/predicates/5/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`%\` (1:18)
> 1 | function foo(x): % checks {
    |                  ^
  2 |   return typeof x === "string";
  3 | }
  4 |],
  "input": "function foo(x): % checks {
  return typeof x === \\"string\\";
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/proto-props/interface/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the token \`:\` (2:9)
  1 | interface I {
> 2 |   proto p: string;
    |         ^
  3 | }
  4 |],
  "input": "interface I {
  proto p: string;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/proto-props/object/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the token \`:\` (1:18)
> 1 | type T = { proto p: string }
    |                  ^
  2 |],
  "input": "type T = { proto p: string }
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/proto-props/proto-static/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the token \`:\` (2:16)
  1 | declare class C {
> 2 |   proto static p: T;
    |                ^
  3 | }
  4 |],
  "input": "declare class C {
  proto static p: T;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/proto-props/static-proto/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the token \`:\` (2:16)
  1 | declare class C {
> 2 |   static proto p: T;
    |                ^
  3 | }
  4 |],
  "input": "declare class C {
  static proto p: T;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/regression/arrow-in-ternary-with-param-type-and-return-type-like/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected end of input, expected the token \`:\` (3:1)
  1 | test
  2 |   ? (x: T): U => y
> 3 |
    | ^],
  "input": "test
  ? (x: T): U => y
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/regression/issue-58/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`;\`, expected the token \`:\` (2:17)
  1 | // Valid lhs value inside parentheses
> 2 | a ? (b) : c => d; // a ? b : (c => d)
    |                 ^
  3 | a ? (b) : c => d : e; // a ? ((b): c => d) : e
  4 | a ? (b) : (c) : d => e; // a ? b : ((c): d => e)
  5 |],
  "input": "// Valid lhs value inside parentheses
a ? (b) : c => d; // a ? b : (c => d)
a ? (b) : c => d : e; // a ? ((b): c => d) : e
a ? (b) : (c) : d => e; // a ? b : ((c): d => e)

// Nested arrow function inside parentheses
a ? (b = (c) => d) : e => f; // a ? (b = (c) => d) : (e => f)
a ? (b = (c) => d) : e => f : g; // a ? ((b = (c) => d): e => f) : g

// Nested conditional expressions
    b ? c ? (d) : e => (f) : g : h; // b ? (c ? ((d): e => f) : g) : h
a ? b ? c ? (d) : e => (f) : g : h; // a ? (b ? (c ? d : (e => f)) : g) : h

a ? b ? (c) : (d) : (e) => f : g; // a ? (b ? c : ((d): e => f)) : g

// Multiple arrow functions
a ? (b) : c => d : (e) : f => g; // a ? ((b): c => d) : ((e): f => g)

// Multiple nested arrow functions (<T> is needed to avoid ambiguities)
a ? (b) : c => (d) : e => f : g; // a ? ((b): c => ((d): e => f)) : g
a ? (b) : c => <T>(d) : e => f; // a ? b : (c => (<T>(d): e => f))
a ? <T>(b) : c => (d) : e => f; // a ? (<T>(b): c => d) : (e => f)

// Invalid lhs value inside parentheses
a ? (b => c) : d => e; // a ? (b => c) : (d => e)
a ? b ? (c => d) : e => f : g; // a ? (b ? (c => d) : (e => f)) : g

// Invalid lhs value inside parentheses inside arrow function
a ? (b) : c => (d => e) : f => g; // a ? ((b): c => (d => e)) : (f => g)
a ? b ? (c => d) : e => (f => g) : h => i; // a ? (b ? (c => d) : (e => (f => g))) : (h => i)

// Function as type annotation
a ? (b) : (c => d) => e : f; // a ? ((b): (c => d) => e) : f

// Async functions or calls
a ? async (b) : c => d; // a ? (async(b)) : (c => d)
a ? async (b) : c => d : e; // a ? (async (b): c => d) : e
a ? async (b => c) : d => e; // a ? (async(b => c)) : (d => e)
a ? async (b) => (c => d) : e => f; // a ? (async (b) => c => d) : (e => f)

// https://github.com/prettier/prettier/issues/2194
let icecream = what == \\"cone\\"
  ? p => (!!p ? \`here's your \${p} cone\` : \`just the empty cone for you\`)
  : p => \`here's your \${p} \${what}\`;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/regression/issue-58-ambiguous/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`;\`, expected the token \`:\` (4:28)
  2 | // a ? b : (c => ((d): e => f))
  3 | // a ? ((b): c => d) : (e => f)
> 4 | a ? (b) : c => (d) : e => f;
    |                            ^
  5 |],
  "input": "// This can be parsed in two ways:
// a ? b : (c => ((d): e => f))
// a ? ((b): c => d) : (e => f)
a ? (b) : c => (d) : e => f;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/regression/issue-58-failing-1/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`;\`, expected the token \`:\` (2:24)
  1 | // Function which looks like a return type
> 2 | a ? (b) : (c => d) => e;
    |                        ^],
  "input": "// Function which looks like a return type
a ? (b) : (c => d) => e;",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/regression/issue-58-failing-2/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token ILLEGAL (2:37)
  1 | // Invalid LHS parameter after type parameters
> 2 | a ? <T>(b => c) : d => (e) : f => g;
    |                                     ^],
  "input": "// Invalid LHS parameter after type parameters
a ? <T>(b => c) : d => (e) : f => g;",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/regression/issue-58-failing-3/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=>\`, expected the token \`:\` (2:14)
  1 | // Invalid LHS parameter after type parameters
> 2 | a ? (b => c) => (e) : f => g;
    |              ^^],
  "input": "// Invalid LHS parameter after type parameters
a ? (b => c) => (e) : f => g;",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/regression/issue-58-failing-4/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=>\`, expected the token \`:\` (2:20)
  1 | // Invalid LHS parameter
> 2 | a ? async (b => c) => (d) : f => g;
    |                    ^^],
  "input": "// Invalid LHS parameter
a ? async (b => c) => (d) : f => g;",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/regression/issue-321-failing/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the token \`,\` (1:28)
> 1 | const fn: ( Object, Object Object ) => void = ( o1, o2, ) => o1;
    |                            ^^^^^^
  2 |],
  "input": "const fn: ( Object, Object Object ) => void = ( o1, o2, ) => o1;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/regression/issue-2154/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`)\` (1:3)
> 1 | !()=>0
    |   ^
  2 |],
  "input": "!()=>0
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/this-annotation/default/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=\`, expected an identifier (1:32)
> 1 | function foo<T> (this : number = 2) {}
    |                                ^
  2 |],
  "input": "function foo<T> (this : number = 2) {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/this-annotation/object-method-type-this-not-first/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: The \`this\` parameter must be the first function parameter. (2:21)
  1 | type T = {
> 2 |     foo(a : number, this : number) : void
    |                     ^^^^
  3 | }
  4 |],
  "input": "type T = {
    foo(a : number, this : number) : void
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/this-annotation/this-arrow-function/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Arrow functions cannot have a \`this\` parameter; arrow functions automatically bind \`this\` when declared. (1:10)
> 1 | let x = (this : number) => 0
    |          ^^^^^^^^^^^^^
  2 |],
  "input": "let x = (this : number) => 0
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/this-annotation/this-constructor/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Constructors cannot have a \`this\` parameter; constructors don't bind \`this\` like other functions. (2:15)
  1 | class A {
> 2 |   constructor(this: string) {}
    |               ^^^^^^^^^^^^
  3 | }
  4 |],
  "input": "class A {
  constructor(this: string) {}
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/this-annotation/this-getter/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: A getter cannot have a \`this\` parameter. (2:7)
  1 | class Foo {
> 2 |   get foo(this: string) {}
    |       ^^^
  3 | }
  4 |],
  "input": "class Foo {
  get foo(this: string) {}
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/this-annotation/this-getter-type/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: A getter cannot have a \`this\` parameter. (2:7)
  1 | type T = {
> 2 |   get foo(this: string) : void
    |       ^^^
  3 | }
  4 |],
  "input": "type T = {
  get foo(this: string) : void
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/this-annotation/this-no-annot/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: A type annotation is required for the \`this\` parameter. (1:19)
> 1 | function foo (this) {}
    |                   ^
  2 |],
  "input": "function foo (this) {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/this-annotation/this-not-first/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: The \`this\` parameter must be the first function parameter. (1:27)
> 1 | function foo (a : string, this : number) {}
    |                           ^^^^
  2 |],
  "input": "function foo (a : string, this : number) {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/this-annotation/this-not-first-type/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: The \`this\` parameter must be the first function parameter. (1:23)
> 1 | type T = (a : string, this : number) => void
    |                       ^^^^
  2 |],
  "input": "type T = (a : string, this : number) => void
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/this-annotation/this-optional/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: A type annotation is required for the \`this\` parameter. (1:18)
> 1 | function foo(this? : number) {}
    |                  ^
  2 |],
  "input": "function foo(this? : number) {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/this-annotation/this-optional-type/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: The \`this\` parameter cannot be optional. (1:15)
> 1 | type T = (this? : number) => void
    |               ^
  2 |],
  "input": "type T = (this? : number) => void
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/this-annotation/this-setter/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: A setter cannot have a \`this\` parameter. (2:7)
  1 | class Foo {
> 2 |   set foo(this: string) {}
    |       ^^^
  3 | }
  4 |],
  "input": "class Foo {
  set foo(this: string) {}
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/this-annotation/this-setter-type/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: A setter cannot have a \`this\` parameter. (2:7)
  1 | type T = {
> 2 |   set foo(this: string) : void
    |       ^^^
  3 | }
  4 |],
  "input": "type T = {
  set foo(this: string) : void
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/this-annotation/this-string-literal-constructor/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Constructors cannot have a \`this\` parameter; constructors don't bind \`this\` like other functions. (2:17)
  1 | class A {
> 2 |   "constructor"(this: string) {}
    |                 ^^^^^^^^^^^^
  3 | }
  4 |],
  "input": "class A {
  \\"constructor\\"(this: string) {}
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/106/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`>\` (1:8)
> 1 | var f: >x:int) => string;
    |        ^
  2 |],
  "input": "var f: >x:int) => string;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/109/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`{\` (1:20)
> 1 | var a : { x: number{ y: string } } = { x: 0, y: 'foo' };
    |                    ^
  2 |],
  "input": "var a : { x: number{ y: string } } = { x: 0, y: 'foo' };
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/112/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected variance sigil (1:11)
> 1 | type X = {+m(): T}
    |           ^
  2 |],
  "input": "type X = {+m(): T}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/113/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected variance sigil (1:11)
> 1 | type X = {-m(): T}
    |           ^
  2 |
  3 |],
  "input": "type X = {-m(): T}

",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/116/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected variance sigil (1:11)
> 1 | type X = {+():T}
    |           ^
  2 |],
  "input": "type X = {+():T}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/117/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected variance sigil (1:11)
> 1 | type X = {-():T}
    |           ^
  2 |],
  "input": "type X = {-():T}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/120/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected variance sigil (1:10)
> 1 | class A {+m():T}
    |          ^
  2 |],
  "input": "class A {+m():T}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/121/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected variance sigil (1:10)
> 1 | class A {-m():T}
    |          ^
  2 |],
  "input": "class A {-m():T}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/122/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`+\`, expected an identifier (1:3)
> 1 | ({+p:e})
    |   ^
  2 |],
  "input": "({+p:e})
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/123/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`-\`, expected an identifier (1:3)
> 1 | ({-p:e})
    |   ^
  2 |],
  "input": "({-p:e})
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/124/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected variance sigil (1:19)
> 1 | class C { static  + m() {} }
    |                   ^
  2 |],
  "input": "class C { static  + m() {} }
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/125/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected variance sigil (1:27)
> 1 | declare class C { static  + m() {} }
    |                           ^
  2 |],
  "input": "declare class C { static  + m() {} }
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/126/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`+\`, expected an identifier (1:4)
> 1 | ({ + m() {} });
    |    ^
  2 |],
  "input": "({ + m() {} });
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/131/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (1:6)
> 1 | type number = string;
    |      ^^^^^^
  2 |],
  "input": "type number = string;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/132/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (1:10)
> 1 | type foo<number> = string;
    |          ^^^^^^
  2 |],
  "input": "type foo<number> = string;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/133/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (1:12)
> 1 | function a<string>(x: string): string {
    |            ^^^^^^
  2 |   return x;
  3 | }
  4 |],
  "input": "function a<string>(x: string): string {
  return x;
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/134/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (1:14)
> 1 | declare type bool = any;
    |              ^^^^
  2 |],
  "input": "declare type bool = any;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/137/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Spreading a type is only allowed inside an object type (2:2)
  1 | interface A {
> 2 | 	...any,
    | 	^^^
  3 | };
  4 |],
  "input": "interface A {
	...any,
};
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/139/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`...\`, expected an identifier (3:3)
  1 | class A {}
  2 | type C = {
> 3 | 	-...A
    | 	 ^^^
  4 | };
  5 |],
  "input": "class A {}
type C = {
	-...A
};
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/invalid-line-terminator-arrow/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Illegal newline before arrow (2:1)
  1 | (): string
> 2 | => {}
    | ^^],
  "input": "(): string
=> {}",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/typeof-reserved-invalid-1/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=\`, expected the token \`{\` (2:27)
  1 | // @flow
> 2 | const x: typeof interface = "hi";
    |                           ^
  3 |],
  "input": "// @flow
const x: typeof interface = \\"hi\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/typeof-reserved-invalid-2/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (2:22)
  1 | // @flow
> 2 | const x: typeof type.interface = "hi";
    |                      ^^^^^^^^^
  3 |],
  "input": "// @flow
const x: typeof type.interface = \\"hi\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/typeof-reserved-invalid-3/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (2:23)
  1 | // @flow
> 2 | const x: typeof stuff.number = "hi";
    |                       ^^^^^^
  3 |],
  "input": "// @flow
const x: typeof stuff.number = \\"hi\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/typeof-reserved-invalid-4/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (2:17)
  1 | // @flow
> 2 | const x: typeof static = "hi";
    |                 ^^^^^^
  3 |],
  "input": "// @flow
const x: typeof static = \\"hi\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/typeof-reserved-invalid-5/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=\` (2:24)
  1 | // @flow
> 2 | const x: typeof typeof = "hi";
    |                        ^
  3 |],
  "input": "// @flow
const x: typeof typeof = \\"hi\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/typeof-reserved-invalid-6/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (2:19)
  1 | // @flow
> 2 | const x: typeof d.i\\u{6e}terface = "hi";
    |                   ^^^^^^^^^^^^^^
  3 |],
  "input": "// @flow
const x: typeof d.i\\\\u{6e}terface = \\"hi\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-annotations/with-default-invalid/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`:\`, expected the token \`,\` (1:21)
> 1 | function x(foo = "1": string) {}
    |                     ^],
  "input": "function x(foo = \\"1\\": string) {}",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-exports/star-as-from/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected identifier, expected the identifier \`from\` (1:15)
> 1 | export type * as fooTypes from "foo";
    |               ^^
  2 |],
  "input": "export type * as fooTypes from \\"foo\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-generics/async-arrow-invalid/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token ILLEGAL (2:1)
  1 | <T> async () => {}
> 2 |
    | ^],
  "input": "<T> async () => {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-imports/invalid-import-type/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (1:13)
> 1 | import type string from "foo";
    |             ^^^^^^
  2 |],
  "input": "import type string from \\"foo\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-imports/invalid-import-type-2/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (1:15)
> 1 | import type { string } from "foo";
    |               ^^^^^^
  2 |],
  "input": "import type { string } from \\"foo\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-imports/invalid-import-type-3/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (1:15)
> 1 | import typeof string from "foo";
    |               ^^^^^^
  2 |],
  "input": "import typeof string from \\"foo\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-imports/invalid-import-type-4/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (1:20)
> 1 | import typeof * as string from "foo";
    |                    ^^^^^^
  2 |],
  "input": "import typeof * as string from \\"foo\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-imports/invalid-import-type-as/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`debugger\` (1:18)
> 1 | import { type as debugger } from "foo";
    |                  ^^^^^^^^
  2 |],
  "input": "import { type as debugger } from \\"foo\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-imports/invalid-import-type-namespace/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`*\` (1:13)
> 1 | import type * as namespace from "bar";
    |             ^
  2 |],
  "input": "import type * as namespace from \\"bar\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-imports/invalid-import-type-shorthand/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: The \`type\` and \`typeof\` keywords on named imports can only be used on regular \`import\` statements. It cannot be used with \`import type\` or \`import typeof\` statements (1:16)
> 1 | import typeof {typeof t} from "foo";
    |                ^^^^^^
  2 |],
  "input": "import typeof {typeof t} from \\"foo\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-imports/invalid-import-type-shorthand-2/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: The \`type\` and \`typeof\` keywords on named imports can only be used on regular \`import\` statements. It cannot be used with \`import type\` or \`import typeof\` statements (1:14)
> 1 | import type {type t} from "foo";
    |              ^^^^
  2 |],
  "input": "import type {type t} from \\"foo\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-imports/invalid-import-type-shorthand-3/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (1:17)
> 1 | import { typeof string } from "foo";
    |                 ^^^^^^
  2 |],
  "input": "import { typeof string } from \\"foo\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-imports/invalid-import-type-shorthand-4/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (1:15)
> 1 | import { type string } from "foo";
    |               ^^^^^^
  2 |],
  "input": "import { type string } from \\"foo\\";
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/arrow_error_with_jsx/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token ILLEGAL (2:1)
  1 | <T>"I'm not an arrow function"
> 2 |
    | ^],
  "input": "<T>\\"I'm not an arrow function\\"
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/arrow_error_without_jsx/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token ILLEGAL (2:1)
  1 | <T>"I'm not an arrow function"
> 2 |
    | ^],
  "input": "<T>\\"I'm not an arrow function\\"
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/default-invalid-class-extends/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=\`, expected the token \`,\` (1:21)
> 1 | class A extends B<T = number> {}
    |                     ^
  2 |],
  "input": "class A extends B<T = number> {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/default-invalid-declare-func/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`{\`, expected the token \`:\` (1:36)
> 1 | declare function foo<T = string>() {}
    |                                    ^
  2 |],
  "input": "declare function foo<T = string>() {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/default-invalid-var-type/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`=\`, expected the token \`,\` (1:16)
> 1 | var x: Array<T = number>
    |                ^
  2 |],
  "input": "var x: Array<T = number>
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/default-missing/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Type parameter declaration needs a default, since a preceding type parameter declaration has a default. (1:29)
> 1 | type A<HasDefault = string, NoDefault> = T;
    |                             ^^^^^^^^^
  2 |],
  "input": "type A<HasDefault = string, NoDefault> = T;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/empty/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`>\`, expected an identifier (2:10)
  1 | // Type parameter declaration may not have 0 type parameters
> 2 | type Foo<> = number;
    |          ^
  3 |],
  "input": "// Type parameter declaration may not have 0 type parameters
type Foo<> = number;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/error-object-property-type-param/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`}\`, expected the token \`(\` (3:1)
  1 | const s = {
  2 |   p<T>
> 3 | }
    | ^
  4 |],
  "input": "const s = {
  p<T>
}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/invalid-getter/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`<\`, expected the token \`(\` (2:11)
  1 | const obj = {
> 2 |   get prop<T>() {},
    |           ^
  3 | };],
  "input": "const obj = {
  get prop<T>() {},
};",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/invalid-setter/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`<\`, expected the token \`(\` (2:11)
  1 | const obj = {
> 2 |   set prop<T>(a) {},
    |           ^
  3 | };],
  "input": "const obj = {
  set prop<T>(a) {},
};",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/reserved-word-class-name-failure/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`delete\` (1:15)
> 1 | declare class delete {}
    |               ^^^^^^
  2 |],
  "input": "declare class delete {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/type-parameter-declaration/star/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`*\`, expected an identifier (2:10)
  1 | // Star is only for type parameter initialization
> 2 | type Foo<*> = number;
    |          ^
  3 |],
  "input": "// Star is only for type parameter initialization
type Foo<*> = number;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/typeapp-call/async-call/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`;\`, expected the token \`=>\` (2:11)
  1 | // @flow
> 2 | async<T>();
    |           ^
  3 |],
  "input": "// @flow
async<T>();
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/typeapp-call/underscore_is_illegal_param_instantiation_otherwise/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (2:16)
  1 | //@flow
> 2 | var x: Generic<_> = 3;
    |                ^
  3 |],
  "input": "//@flow
var x: Generic<_> = 3;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/typeapp-call/underscore_is_illegal_type_name/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (2:6)
  1 | //@flow
> 2 | type _ = number;
    |      ^
  3 |],
  "input": "//@flow
type _ = number;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/typeapp-call/underscore_is_illegal_type_param_name/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected reserved type (2:14)
  1 | //@flow
> 2 | type Generic<_> = _;
    |              ^
  3 |],
  "input": "//@flow
type Generic<_> = _;
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/typecasts/fail-in-async-optional-calls/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`:\`, expected the token \`,\` (1:12)
> 1 | async?.(bar: string) => {}
    |            ^
  2 |],
  "input": "async?.(bar: string) => {}
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/typecasts/fail-in-calls/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`:\`, expected the token \`,\` (1:14)
> 1 | funccall(a, b: string);
    |              ^
  2 |],
  "input": "funccall(a, b: string);
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/typecasts/fail-in-calls-with-one-arg/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`:\`, expected the token \`,\` (1:11)
> 1 | funccall(b: string);
    |           ^
  2 |],
  "input": "funccall(b: string);
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/typecasts/fail-in-optional-calls/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`:\`, expected the token \`,\` (1:16)
> 1 | funccall?.(a, b: string);
    |                ^
  2 |],
  "input": "funccall?.(a, b: string);
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/typecasts/fail-without-parens/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`:\`, expected the token \`)\` (1:6)
> 1 | (A, B: T)
    |      ^
  2 |],
  "input": "(A, B: T)
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/typecasts/fails-in-array-expression-1/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`:\`, expected the token \`,\` (1:3)
> 1 | [a: string];
    |   ^],
  "input": "[a: string];",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/typecasts/fails-in-array-expression-2/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`:\`, expected the token \`,\` (1:4)
> 1 | ([a: string]);
    |    ^],
  "input": "([a: string]);",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/typecasts/fails-in-array-expression-3/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`:\`, expected the token \`,\` (1:8)
> 1 | ([a, [b: string]]);
    |        ^],
  "input": "([a, [b: string]]);",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/typecasts/fails-in-array-expression-4/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`:\`, expected the token \`,\` (1:10)
> 1 | async ([a: string]);
    |          ^],
  "input": "async ([a: string]);",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/typecasts/fails-in-array-expression-5/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token \`:\`, expected the token \`,\` (1:14)
> 1 | async ([a, [b: string]]);
    |              ^],
  "input": "async ([a, [b: string]]);",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/typecasts/generic-arrow-func-invalid/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token ILLEGAL (2:1)
  1 | <T>(() => {}: any);
> 2 |
    | ^],
  "input": "<T>(() => {}: any);
",
  "options": Object {
    "parser": "flow",
  },
}
`;

exports[`babel/packages/babel-parser/test/fixtures/flow/typecasts/generic-arrow-func-invalid-parenthesized/input.js
Options: {"parser":"flow"} 1`] = `
Object {
  "error": [SyntaxError: Unexpected token ILLEGAL (2:1)
  1 | <T>(() => {}: any);
> 2 |
    | ^],
  "input": "<T>(() => {}: any);
",
  "options": Object {
    "parser": "flow",
  },
}
`;
