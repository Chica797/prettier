"use strict";

module.exports = {
  AssignmentExpression: ["left", "right"],
  AssignmentPattern: ["decorators", "left", "right", "typeAnnotation"],
  ArrayExpression: ["elements"],
  ArrayPattern: ["decorators", "elements", "typeAnnotation"],
  ArrowFunctionExpression: ["typeParameters", "params", "returnType", "body"],
  AwaitExpression: ["argument"],
  BlockStatement: ["body"],
  BinaryExpression: ["left", "right"],
  BreakStatement: ["label"],
  CallExpression: ["callee", "typeParameters", "arguments"],
  CatchClause: ["param", "body"],
  ChainExpression: ["expression"],
  ClassBody: ["body"],
  ClassDeclaration: [
    "decorators",
    "id",
    "typeParameters",
    "superClass",
    "superTypeParameters",
    "implements",
    "body",
  ],
  ClassExpression: [
    "decorators",
    "id",
    "typeParameters",
    "superClass",
    "superTypeParameters",
    "implements",
    "body",
  ],
  ConditionalExpression: ["test", "consequent", "alternate"],
  ContinueStatement: ["label"],
  DebuggerStatement: [],
  DoWhileStatement: ["body", "test"],
  EmptyStatement: [],
  ExportAllDeclaration: ["exported", "source"],
  ExportDefaultDeclaration: ["declaration"],
  ExportNamedDeclaration: ["declaration", "specifiers", "source"],
  ExportSpecifier: ["exported", "local"],
  ExpressionStatement: ["expression"],
  ExperimentalRestProperty: ["argument"],
  ExperimentalSpreadProperty: ["argument"],
  ForStatement: ["init", "test", "update", "body"],
  ForInStatement: ["left", "right", "body"],
  ForOfStatement: ["left", "right", "body"],
  FunctionDeclaration: ["id", "typeParameters", "params", "returnType", "body"],
  FunctionExpression: ["id", "typeParameters", "params", "returnType", "body"],
  Identifier: ["decorators", "typeAnnotation"],
  IfStatement: ["test", "consequent", "alternate"],
  ImportDeclaration: ["specifiers", "source"],
  ImportDefaultSpecifier: ["local"],
  ImportExpression: ["source"],
  ImportNamespaceSpecifier: ["local"],
  ImportSpecifier: ["imported", "local"],
  JSXAttribute: ["name", "value"],
  JSXClosingElement: ["name"],
  JSXElement: ["openingElement", "children", "closingElement"],
  JSXEmptyExpression: [],
  JSXExpressionContainer: ["expression"],
  JSXIdentifier: [],
  JSXMemberExpression: ["object", "property"],
  JSXNamespacedName: ["namespace", "name"],
  JSXOpeningElement: ["name", "typeParameters", "attributes"],
  JSXSpreadAttribute: ["argument"],
  JSXText: [],
  JSXFragment: ["openingFragment", "children", "closingFragment"],
  Literal: [],
  LabeledStatement: ["label", "body"],
  LogicalExpression: ["left", "right"],
  MemberExpression: ["object", "property"],
  MetaProperty: ["meta", "property"],
  MethodDefinition: ["decorators", "key", "value"],
  NewExpression: ["callee", "typeParameters", "arguments"],
  ObjectExpression: ["properties"],
  ObjectPattern: ["decorators", "properties", "typeAnnotation"],
  Program: ["body"],
  Property: ["key", "value"],
  RestElement: ["decorators", "argument", "typeAnnotation"],
  ReturnStatement: ["argument"],
  SequenceExpression: ["expressions"],
  SpreadElement: ["argument"],
  Super: [],
  SwitchStatement: ["discriminant", "cases"],
  SwitchCase: ["test", "consequent"],
  TaggedTemplateExpression: ["tag", "typeParameters", "quasi"],
  TemplateElement: [],
  TemplateLiteral: ["quasis", "expressions"],
  ThisExpression: [],
  ThrowStatement: ["argument"],
  TryStatement: ["block", "handler", "finalizer"],
  UnaryExpression: ["argument"],
  UpdateExpression: ["argument"],
  VariableDeclaration: ["declarations"],
  VariableDeclarator: ["id", "init"],
  WhileStatement: ["test", "body"],
  WithStatement: ["object", "body"],
  YieldExpression: ["argument"],
  JSXClosingFragment: [],
  JSXOpeningFragment: [],
  JSXSpreadChild: ["expression"],
  ClassProperty: ["decorators", "key", "typeAnnotation", "value"],
  Decorator: ["expression"],
  TSAbstractClassProperty: ["decorators", "key", "typeAnnotation", "value"],
  TSAbstractKeyword: [],
  TSAbstractMethodDefinition: ["key", "value"],
  TSAnyKeyword: [],
  TSArrayType: ["elementType"],
  TSAsExpression: ["expression", "typeAnnotation"],
  TSAsyncKeyword: [],
  TSBigIntKeyword: [],
  TSBooleanKeyword: [],
  TSCallSignatureDeclaration: ["typeParameters", "params", "returnType"],
  TSClassImplements: ["expression", "typeParameters"],
  TSConditionalType: ["checkType", "extendsType", "trueType", "falseType"],
  TSConstructorType: ["typeParameters", "params", "returnType"],
  TSConstructSignatureDeclaration: ["typeParameters", "params", "returnType"],
  TSDeclareFunction: ["id", "typeParameters", "params", "returnType", "body"],
  TSDeclareKeyword: [],
  TSEmptyBodyFunctionExpression: [
    "id",
    "typeParameters",
    "params",
    "returnType",
  ],
  TSEnumDeclaration: ["id", "members"],
  TSEnumMember: ["id", "initializer"],
  TSExportAssignment: ["expression"],
  TSExportKeyword: [],
  TSExternalModuleReference: ["expression"],
  TSFunctionType: ["typeParameters", "params", "returnType"],
  TSImportEqualsDeclaration: ["id", "moduleReference"],
  TSImportType: ["parameter", "qualifier", "typeParameters"],
  TSIndexedAccessType: ["indexType", "objectType"],
  TSIndexSignature: ["parameters", "typeAnnotation"],
  TSInferType: ["typeParameter"],
  TSInterfaceBody: ["body"],
  TSInterfaceDeclaration: ["id", "typeParameters", "extends", "body"],
  TSInterfaceHeritage: ["expression", "typeParameters"],
  TSIntersectionType: ["types"],
  TSIntrinsicKeyword: [],
  TSLiteralType: ["literal"],
  TSMappedType: ["nameType", "typeParameter", "typeAnnotation"],
  TSMethodSignature: ["typeParameters", "key", "params", "returnType"],
  TSModuleBlock: ["body"],
  TSModuleDeclaration: ["id", "body"],
  TSNamedTupleMember: ["elementType"],
  TSNamespaceExportDeclaration: ["id"],
  TSNeverKeyword: [],
  TSNonNullExpression: ["expression"],
  TSNullKeyword: [],
  TSNumberKeyword: [],
  TSObjectKeyword: [],
  TSOptionalType: ["typeAnnotation"],
  TSParameterProperty: ["decorators", "parameter"],
  TSParenthesizedType: ["typeAnnotation"],
  TSPrivateKeyword: [],
  TSPropertySignature: ["typeAnnotation", "key", "initializer"],
  TSProtectedKeyword: [],
  TSPublicKeyword: [],
  TSQualifiedName: ["left", "right"],
  TSReadonlyKeyword: [],
  TSRestType: ["typeAnnotation"],
  TSStaticKeyword: [],
  TSStringKeyword: [],
  TSSymbolKeyword: [],
  TSTemplateLiteralType: ["quasis", "types"],
  TSThisType: [],
  TSTupleType: ["elementTypes"],
  TSTypeAliasDeclaration: ["id", "typeParameters", "typeAnnotation"],
  TSTypeAnnotation: ["typeAnnotation"],
  TSTypeAssertion: ["typeAnnotation", "expression"],
  TSTypeLiteral: ["members"],
  TSTypeOperator: ["typeAnnotation"],
  TSTypeParameter: ["name", "constraint", "default"],
  TSTypeParameterDeclaration: ["params"],
  TSTypeParameterInstantiation: ["params"],
  TSTypePredicate: ["typeAnnotation", "parameterName"],
  TSTypeQuery: ["exprName"],
  TSTypeReference: ["typeName", "typeParameters"],
  TSUndefinedKeyword: [],
  TSUnionType: ["types"],
  TSUnknownKeyword: [],
  TSVoidKeyword: [],
};
